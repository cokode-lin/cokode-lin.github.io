<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于立创泰山派的Linux驱动开发笔记</title>
      <link href="/2024/05/19/Linux/%E5%9F%BA%E4%BA%8E%E7%AB%8B%E5%88%9B%E6%B3%B0%E5%B1%B1%E6%B4%BE%E7%9A%84Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/19/Linux/%E5%9F%BA%E4%BA%8E%E7%AB%8B%E5%88%9B%E6%B3%B0%E5%B1%B1%E6%B4%BE%E7%9A%84Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="资料汇总"><a href="#资料汇总" class="headerlink" title="资料汇总"></a>资料汇总</h1><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><p><a href="https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-tai-shan-pai-kai-fa-ban">立创-泰山派开发板</a></p><h2 id="文档资料"><a href="#文档资料" class="headerlink" title="文档资料"></a>文档资料</h2><p><a href="https://lceda001.feishu.cn/wiki/IJtRwVu5kiylHykl3RJcQ8ANncY">【立创·泰山派RK3566】开发板</a></p><h2 id="视频资料"><a href="#视频资料" class="headerlink" title="视频资料"></a>视频资料</h2><p><a href="https://www.bilibili.com/video/BV1gF4m1u7n3/">BiliBili-立创泰山派训练营</a></p><p><a href="https://www.bilibili.com/video/BV1kK421k7yh">BiliBili-泰山派驱动开发</a></p><p><a href="https://www.bilibili.com/video/BV1Vy4y1B7ta/">BiliBili-北京迅为-嵌入式学习之Linux驱动篇</a></p><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="在虚拟机上安装-Ubuntu18"><a href="#在虚拟机上安装-Ubuntu18" class="headerlink" title="在虚拟机上安装 Ubuntu18"></a>在虚拟机上安装 Ubuntu18</h2><h3 id="虚拟机介绍"><a href="#虚拟机介绍" class="headerlink" title="虚拟机介绍"></a>虚拟机介绍</h3><p>虚拟机（Virtual Machine，简称VM）是一种计算机软件模拟的计算机系统。它模拟了足够多的硬件，以实现一个完整的、独立的计算环境，可以在一个物理机器（宿主机）上同时运行多个独立的操作系统（客户机操作系统）。<br>虚拟机的关键特性包括：</p><ol><li><strong>隔离性</strong>：每个虚拟机都运行在自己的环境中，与其他虚拟机和宿主机操作系统隔离，这意味着一个虚拟机的崩溃或故障不会影响到其他虚拟机或宿主机。</li><li><strong>封装性</strong>：虚拟机通常以文件形式存在，可以很容易地备份、复制、迁移或恢复。</li><li><strong>硬件无关性</strong>：虚拟机可以在不同的物理硬件上运行，只要该硬件上安装了相应的虚拟化软件。</li><li><strong>资源分配</strong>：虚拟机可以指定分配给它的CPU、内存、存储和网络资源，允许用户根据需要调整资源分配。<br>虚拟机通常由以下几部分组成：</li></ol><ul><li><strong>虚拟化层（Hypervisor）</strong>：这是运行在物理硬件上的软件层，负责创建和管理虚拟机。根据虚拟化层实现方式和运行位置的不同，可以分为Type 1（裸机虚拟化，如VMware ESXi）和Type 2（宿主型虚拟化，如Oracle VirtualBox）。</li><li><strong>客户机操作系统（Guest OS）</strong>：这是在虚拟机内部运行的操作系统，可以是Windows、Linux、macOS等。</li><li><strong>虚拟硬件</strong>：虚拟机模拟的硬件，包括CPU、内存、硬盘、网络接口等，供客户机操作系统使用。<br>虚拟机的使用场景非常广泛，包括服务器虚拟化、桌面虚拟化、软件开发和测试、教育和研究、云服务等。通过虚拟化技术，用户可以在一台物理服务器上运行多个独立的操作系统和应用程序，从而提高资源利用率，降低成本，并简化IT管理和维护工作。</li></ul><p>常用的虚拟机软件包括以下几种：</p><ol><li><strong>VMware vSphere/VMware Workstation</strong>:<ul><li><strong>VMware vSphere</strong> 是企业级的虚拟化平台，包括ESXi和vCenter Server等组件，适用于大型数据中心和云计算环境。</li><li><strong>VMware Workstation</strong> 是一款桌面虚拟化软件，适合个人和小型企业使用，支持多种操作系统。</li></ul></li><li><strong>Microsoft Hyper-V</strong>:<ul><li>Hyper-V 是微软提供的虚拟化解决方案，集成在Windows Server中，也可以在带有专业版或企业版的Windows 10上使用。</li></ul></li><li><strong>Oracle VirtualBox</strong>:<ul><li>VirtualBox 是一款开源的虚拟机软件，支持Windows、Mac OS X、Linux和Solaris主机操作系统，以及多种客户机操作系统。</li></ul></li><li><strong>Citrix XenServer</strong>:<ul><li>XenServer 是Citrix推出的企业级虚拟化平台，基于Xen开源项目，适用于服务器虚拟化。</li></ul></li><li><strong>KVM (Kernel-based Virtual Machine)</strong>:<ul><li>KVM 是Linux内核的一部分，提供了一个开源的虚拟化基础设施。它可以作为独立的产品使用，也可以作为更广泛解决方案的一部分，如oVirt和OpenStack。</li></ul></li><li><strong>Parallels Desktop</strong>:<ul><li>Parallels Desktop 是一款专为Mac OS X设计的虚拟机软件，允许用户在Mac上运行Windows和其他操作系统。</li></ul></li><li><strong>VMware Fusion</strong>:<ul><li>VMware Fusion 是VMware为Mac OS X提供的桌面虚拟化软件，类似于VMware Workstation，但专为Mac用户设计。<br>这些虚拟机软件各有特点，适用于不同的使用场景和需求。选择合适的虚拟机软件时，需要考虑支持的操作系统、性能要求、管理功能、成本以及用户的具体需求。</li></ul></li></ol><h3 id="安装-VMware-Workstation"><a href="#安装-VMware-Workstation" class="headerlink" title="安装 VMware Workstation"></a>安装 VMware Workstation</h3><p><strong>版本：</strong>VMware Workstation 17 Pro</p><p><strong>下载地址：</strong><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">Download VMware Workstation Pro</a></p><p>VMware Workstation 17 Pro 目前支持个人开发者免费使用，去官网注册一个账号登录就行了。</p><p>如果懒得注册，也可以直接使用密钥进行激活。百度到的一个密钥：MC60H-DWHD5-H80U9-6V85M-8280D</p><h3 id="Ubuntu下载"><a href="#Ubuntu下载" class="headerlink" title="Ubuntu下载"></a>Ubuntu下载</h3><p><strong>版本</strong>：ubuntu-18.04.6-desktop-amd64</p><p><strong>下载地址：</strong></p><p>中科大源：<a href="https://mirrors.ustc.edu.cn/ubuntu-releases/">Index of /ubuntu-releases/ (ustc.edu.cn)</a></p><p>阿里云源：<a href="https://mirrors.aliyun.com/ubuntu-releases/">ubuntu-releases安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p><p>官方（很慢不推荐）：<a href="https://ubuntu.com/download">Get Ubuntu | Download | Ubuntu</a></p><h3 id="安装-Ubuntu18"><a href="#安装-Ubuntu18" class="headerlink" title="安装 Ubuntu18"></a>安装 Ubuntu18</h3><p>略，请参考：<a href="https://lceda001.feishu.cn/wiki/NggWw6XZliI5D1k9aircDS2Jnkb#HHQmdTuiMozHaqxX29QcduW9nfc">基于VMware和Unbuntu18.04编译 嘉立创·泰山派 Linux SDK</a></p><h2 id="开发环境搭建-1"><a href="#开发环境搭建-1" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><p>待写</p><h3 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h3><p>在开发Linux系统时，安装SSH（Secure Shell）是非常常见的，原因如下：</p><ol><li><strong>远程访问</strong>：SSH允许用户从远程位置安全地访问Linux服务器或计算机。这对于需要在任何地点管理服务器或开发环境的开发人员来说非常重要。</li><li><strong>安全性</strong>：SSH通过加密通信来保护传输的数据，防止中间人攻击和窃听。这对于确保代码和数据的机密性和完整性至关重要。</li><li><strong>命令行访问</strong>：SSH提供了一种高效的命令行界面（CLI）访问方式，这对于需要执行系统管理和自动化任务的开发人员来说非常方便。</li><li><strong>文件传输</strong>：SSH还包括SCP（Secure Copy）和SFTP（Secure File Transfer Protocol）等工具，这些工具允许用户安全地通过网络在本地和远程系统之间传输文件。</li><li><strong>端口转发</strong>：SSH支持端口转发，允许用户将本地端口转发到远程服务器上的端口，或者将远程端口转发到本地机器上，这对于调试网络服务非常有用。</li><li><strong>集成和自动化</strong>：SSH可以与许多开发工具和自动化脚本集成，如Makefiles、CI/CD管道（如Jenkins、GitLab CI）等，以便于自动化部署和测试。</li><li><strong>跨平台兼容性</strong>：SSH客户端和服务端广泛支持多种操作系统，包括Linux、Unix、Windows和macOS，这使得在不同系统之间进行开发和协作变得容易。</li><li><strong>无客户端依赖</strong>：SSH服务端通常不需要在客户端安装任何特殊软件，只需要一个SSH客户端，这在很多操作系统上都是默认安装的。<br>因此，安装SSH对于Linux开发来说是一个基本要求，它为开发人员提供了一种安全、灵活且功能强大的远程管理和服务访问方式。</li></ol><p>安装ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install openssh-client</span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>启动ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显然如下表示启动正常</span></span><br><span class="line">[ ok ] Starting ssh (via systemctl): ssh.service.</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><p>samba 可以把虚拟机 ubuntu 中的文件目录映射到 windows 盘符下，这样你就可以和访问 windows 盘符目录一样去访问 ubuntu 系统里面的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装samba</span></span><br><span class="line">sudo apt-get install samba</span><br><span class="line">sudo apt-get install smbclient</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装完成后查看版本</span></span><br><span class="line">samba -V</span><br></pre></td></tr></table></figure><p>配置 samba</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>写入配置（修改为自己的用户名和文件路径）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[EX_DISK_A]</span><br><span class="line">   comment = share folder</span><br><span class="line">   browseable = yes</span><br><span class="line">   path = /home/cokode/tspi</span><br><span class="line">   valid users = cokode, cokode</span><br><span class="line">   write list = cokode, cokode</span><br><span class="line">   inherit owner = yes</span><br><span class="line">   browsable = yes</span><br><span class="line">   admin users = cokode, cokode</span><br><span class="line">   public = yes</span><br><span class="line">   writable = yes</span><br><span class="line">   create mask = 0755</span><br><span class="line">   read only = No</span><br><span class="line">   directory mode = 0755</span><br></pre></td></tr></table></figure><p>设置用户远程访问密码（cokode替换成自己的用户名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a cokode</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">sudo service smbd restart</span><br></pre></td></tr></table></figure><p>Windows 下快捷键  <code>Win + R</code> 输入 <code>\\</code> 加ip地址即可连接到 Ubuntu。</p><h2 id="编译环境搭建"><a href="#编译环境搭建" class="headerlink" title="编译环境搭建"></a>编译环境搭建</h2><h3 id="docker环境安装"><a href="#docker环境安装" class="headerlink" title="docker环境安装"></a>docker环境安装</h3><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc </span><br></pre></td></tr></table></figure><h4 id="阿里云源安装-Docker"><a href="#阿里云源安装-Docker" class="headerlink" title="阿里云源安装 Docker"></a>阿里云源安装 Docker</h4><ol><li><p><strong>更新软件包索引</strong>： 对于基于 Debian 的系统（如 Ubuntu），首先需要更新软件包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装依赖软件</strong>： 安装一些必要的软件包，这些软件包允许通过 HTTPS 使用仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li><li><p><strong>添加 Docker 的官方 GPG 密钥</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p><strong>添加 Docker 的阿里云镜像源</strong>： 执行以下命令添加 Docker 的阿里云镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>再次更新软件包索引</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Docker CE（社区版）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li><li><p><strong>验证 Docker 安装</strong>： 通过运行以下命令来验证 Docker 是否成功安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker --version</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 Docker</strong>： 安装完成后，需要启动 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p><strong>设置 Docker 开机自启</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、驱动开发"><a href="#三、驱动开发" class="headerlink" title="三、驱动开发"></a>三、驱动开发</h1><p>待写</p><h1 id="四、练手项目"><a href="#四、练手项目" class="headerlink" title="四、练手项目"></a>四、练手项目</h1><p>待写</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bit1个数计算算法</title>
      <link href="/2023/12/30/%E7%AE%97%E6%B3%95/bit1%E4%B8%AA%E6%95%B0%E8%AE%A1%E7%AE%97%E7%AE%97%E6%B3%95/"/>
      <url>/2023/12/30/%E7%AE%97%E6%B3%95/bit1%E4%B8%AA%E6%95%B0%E8%AE%A1%E7%AE%97%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BK算法（Brian-Kernighan’s算法）"><a href="#BK算法（Brian-Kernighan’s算法）" class="headerlink" title="BK算法（Brian Kernighan’s算法）"></a>BK算法（Brian Kernighan’s算法）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">countBit1InByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (byte) </span><br><span class="line">    &#123;</span><br><span class="line">        byte &amp;= (byte - <span class="number">1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此算法的思想是利用 n &amp; (n-1) 可以将 n 的最右边的 1 置零的特性，通过迭代直到 n 变为 0，统计迭代次数即可。</p><p>它的运行时间与字节中bit1的位数成正比，而不是与字节的总位数成正比。因此计算效率不稳定，适用于bit1较少的场景。</p><h1 id="位移法"><a href="#位移法" class="headerlink" title="位移法"></a>位移法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>   BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span>  WORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>    DWORD;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算一个字节中bit1的个数</span></span><br><span class="line">BYTE <span class="title function_">countBit1InByte</span><span class="params">(BYTE byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一步：将相邻的两位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    byte = byte - ((byte &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：将相邻的 4 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    byte = (byte &amp; <span class="number">0x33</span>) + ((byte &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：将相邻的 8 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    <span class="keyword">return</span> (byte + (byte &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算4个字节中bit1的个数</span></span><br><span class="line">BYTE <span class="title function_">countBit1InInt</span><span class="params">(DWORD num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一步：将相邻的两位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    num = num - ((num &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    <span class="comment">// 第二步：将相邻的 4 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    num = (num &amp; <span class="number">0x33333333</span>) + ((num &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    <span class="comment">// 第三步：将相邻的 8 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    num = (num + (num &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>;</span><br><span class="line">    <span class="comment">// 第四步：将相邻的 16 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    num = num + (num &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// 第五步：将相邻的 32 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    <span class="keyword">return</span> (num + (num &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0x0000003F</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个非常高效的方法，使用了位运算技巧来快速计算结果，而不需要使用循环或条件语句。</p><p>不过这个算法理解起来较为困难，下面开始解释每一步是如何工作的。</p><p>以 0x93 为例</p><ol><li><p><strong>第一步</strong>：<code>byte = byte - ((byte &gt;&gt; 1) &amp; 0x55);</code></p><p>这一步的结果是将相邻的两位中的1位相加，并将结果保存在原来的位置。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10010011</span> (<span class="number">0</span>x93) : original</span><br><span class="line"><span class="number">01000001</span> (<span class="number">0</span>x41) : (byte &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0</span>x55</span><br><span class="line"><span class="number">01010010</span> (<span class="number">0</span>x52) : byte - ((byte &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0</span>x55)</span><br><span class="line">------</span><br><span class="line"><span class="number">01010010</span> (<span class="number">0</span>x52) : result</span><br></pre></td></tr></table></figure></li><li><p><strong>第二步</strong>：<code>byte = (byte &amp; 0x33) + ((byte &gt;&gt; 2) &amp; 0x33);</code></p><p>这一步是计算前后4位的bit1个数，并将计算的结果保存到各自的位置。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01010010</span> (<span class="number">0</span>x52) : original</span><br><span class="line"><span class="number">00010000</span> (<span class="number">0</span>x10) : (byte &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0</span>x33</span><br><span class="line"><span class="number">00010010</span> (<span class="number">0</span>x12) : byte &amp; <span class="number">0</span>x33</span><br><span class="line"><span class="number">00100010</span> (<span class="number">0</span>x22) : (byte &amp; <span class="number">0</span>x33) + ((byte &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0</span>x33)</span><br><span class="line">------</span><br><span class="line"><span class="number">00100010</span> (<span class="number">0</span>x22) : result</span><br></pre></td></tr></table></figure></li><li><p><strong>第三步</strong>：<code>return (byte + (byte &gt;&gt; 4)) &amp; 0x0F;</code></p><p>将前后4位中bit1的个数相加，然后通过 &amp; 0x0F 确保结果在4位以内。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00100010</span> (<span class="number">0</span>x22) : original</span><br><span class="line"><span class="number">00000100</span> (<span class="number">0</span>x04) : (byte + (byte &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0</span>x0F</span><br><span class="line">------</span><br><span class="line"><span class="number">00000100</span> (<span class="number">0</span>x04) : result</span><br></pre></td></tr></table></figure></li></ol><h1 id="查表法"><a href="#查表法" class="headerlink" title="查表法"></a>查表法</h1><p>最高效的算法，只需要多占用 256 Bytes 的内存空间，就可换来效率的极大提升。</p><p>先用经典位计数算法或BK算法计算 0 - 255 这 256 个数字对应的 bit1 个数，并将计算的结构保存到 bit1Table 数组中。之后使用的时候就可以直接通过bit1Table 来获取各个数值对应的 bit1 个数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>   BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span>  WORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>    DWORD;</span><br><span class="line"></span><br><span class="line">BYTE bit1Table[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算一个字节中bit1的个数</span></span><br><span class="line">BYTE <span class="title function_">countBit1InByte</span><span class="params">(BYTE byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一步：将相邻的两位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    byte = byte - ((byte &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：将相邻的 4 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    byte = (byte &amp; <span class="number">0x33</span>) + ((byte &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：将相邻的 8 位中的 1 位相加，结果保存在原来的位置</span></span><br><span class="line">    <span class="keyword">return</span> (byte + (byte &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化bit1个数表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">countBit1_InitTable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bit1Table[i] = countBit1InByte(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查表法计算一个Byte中bit1的个数，需先调用 countBit1_InitTable 函数</span></span><br><span class="line">BYTE <span class="title function_">countBit1InByte_LookupTable</span><span class="params">(BYTE byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bit1Table[byte];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    BYTE dat0 = <span class="number">0x12</span>;</span><br><span class="line">    BYTE dat1 = <span class="number">0x31</span>;</span><br><span class="line"></span><br><span class="line">    countBit1_InitTable();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dat0 bit1 = %d\n&quot;</span>, countBit1InByte_LookupTable(dat0));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dat0 bit1 = %d\n&quot;</span>, countBit1InByte_LookupTable(dat1));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat脚本</title>
      <link href="/2023/08/30/%E8%84%9A%E6%9C%AC/bat%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/08/30/%E8%84%9A%E6%9C%AC/bat%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-桌面快捷方式箭头和盾牌去除"><a href="#🚀-桌面快捷方式箭头和盾牌去除" class="headerlink" title="🚀 桌面快捷方式箭头和盾牌去除"></a>🚀 桌面快捷方式箭头和盾牌去除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@REM 此脚本需要以管理员身份运行</span><br><span class="line"></span><br><span class="line">@REM 快捷方式小箭头和需要提权运行的提示图标均为透明图标</span><br><span class="line">reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot;</span> /v 29 /d <span class="string">&quot;%systemroot%\system32\imageres.dll,197&quot;</span> /t reg_sz /f</span><br><span class="line">reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot;</span> /v 77 /d <span class="string">&quot;%systemroot%\system32\imageres.dll,197&quot;</span> /t reg_sz /f</span><br><span class="line"></span><br><span class="line">@REM 关闭文件资源管理器</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line"></span><br><span class="line">@REM 清除原先的图标缓存</span><br><span class="line">attrib -h -s -r <span class="string">&quot;%userprofile%\AppData\Local\IconCache.db&quot;</span></span><br><span class="line">del /f <span class="string">&quot;%userprofile%\AppData\Local\IconCache.db&quot;</span></span><br><span class="line"></span><br><span class="line">@REM 重启文件资源管理器</span><br><span class="line">start explorer</span><br></pre></td></tr></table></figure><h2 id="🚀-桌面快捷方式图标修复"><a href="#🚀-桌面快捷方式图标修复" class="headerlink" title="🚀 桌面快捷方式图标修复"></a>🚀 桌面快捷方式图标修复</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">@REM 关闭文件资源管理器</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line"></span><br><span class="line">@REM 清除原先的图标缓存</span><br><span class="line">attrib -h -s -r <span class="string">&quot;%userprofile%\AppData\Local\IconCache.db&quot;</span></span><br><span class="line">del /f <span class="string">&quot;%userprofile%\AppData\Local\IconCache.db&quot;</span></span><br><span class="line"></span><br><span class="line">@REM 重启文件资源管理器</span><br><span class="line">start explorer</span><br></pre></td></tr></table></figure><h2 id="🚀-连续拷贝脚本"><a href="#🚀-连续拷贝脚本" class="headerlink" title="🚀 连续拷贝脚本"></a>🚀 连续拷贝脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">REM 将当前目录下所有bin文件考贝到桌面的ICS文件夹</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">:Loop</span><br><span class="line"></span><br><span class="line">cls</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> filename=*.txt</span><br><span class="line"><span class="built_in">set</span> targetPath=%USERPROFILE%\Desktop\Test\</span><br><span class="line"></span><br><span class="line">REM 打印文件名和修改时间</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (%filename%) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">echo</span> %%~tf      %%f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">REM 复制文件</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (%filename%) <span class="keyword">do</span> (</span><br><span class="line">    copy %%f %targetPath%</span><br><span class="line">    @REM <span class="built_in">echo</span> %targetPath%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Time: %time:~0,2%:%time:~3,2%:%time:~6,2%</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">goto :Loop</span><br></pre></td></tr></table></figure><h2 id="🚀-清除vscode缓存"><a href="#🚀-清除vscode缓存" class="headerlink" title="🚀 清除vscode缓存"></a>🚀 清除vscode缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">rd /s /q %userprofile%\AppData\Roaming\Code\User\workspaceStorage\</span><br><span class="line">rd /s /q %userprofile%\AppData\Local\Microsoft\vscode-cpptools\ipch\</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RaspberryPi-PICO新建工程</title>
      <link href="/2023/08/04/%E5%8D%95%E7%89%87%E6%9C%BA/RaspberryPi-PICO%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
      <url>/2023/08/04/%E5%8D%95%E7%89%87%E6%9C%BA/RaspberryPi-PICO%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-工程文件目录组成"><a href="#🚀-工程文件目录组成" class="headerlink" title="🚀 工程文件目录组成"></a>🚀 工程文件目录组成</h2><p>以创建一个 blink 工程为例</p><p>首先新建一个 blink 目录，该目录结构如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── blink</span><br><span class="line">    ├── build</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── blink.c</span><br><span class="line">    └── pico_sdk_import.cmake</span><br></pre></td></tr></table></figure><p>build 和 main 是目录，build 用于存放编译后的文件，main 目录则用于存放工程相关的 .c 和 .h 文件。</p><p>pico_sdk_import.cmake 这个文件是从 pico-sdk 中拷贝过来的，拷贝命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> <span class="variable">$PICO_SDK_PATH</span>/external/pico_sdk_import.cmake .</span><br></pre></td></tr></table></figure><p>CMakeLists.txt 是 CMake 的配置文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定最低的cmake版本</span></span><br><span class="line">cmake_minimum_required(VERSION 3.12)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定依赖文件</span></span><br><span class="line">include(pico_sdk_import.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工程名以及涉及到的编程语言</span></span><br><span class="line">project(blink C CXX ASM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化pico sdk</span></span><br><span class="line">pico_sdk_init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要编译的源码文件</span></span><br><span class="line">add_executable(blink</span><br><span class="line">        main/blink.c</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要链接的库文件</span></span><br><span class="line">target_link_libraries(blink pico_stdlib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要生成的额外文件</span></span><br><span class="line"><span class="comment"># create map/bin/hex file etc.</span></span><br><span class="line">pico_add_extra_outputs(blink)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="🚀-编译工程"><a href="#🚀-编译工程" class="headerlink" title="🚀 编译工程"></a>🚀 编译工程</h2><p>进入 build 目录，按照下面的命令开始编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p> 编译后会生成 blink.elf、blink.uf2、blink.bin 这三个固件文件。</p><blockquote><p>  .uf2格式可以直接通过板载USB下载</p><p>  <em>.elf格式可以通过SWD接口下载</em></p><p>  .bin格式可以直接flash烧写器烧写到flash中</p></blockquote><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><p><a href="https://blog.csdn.net/tianizimark/article/details/123014765">Raspberry-Pi-PICO系列—第七篇 创建自己的工程</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RaspberryPi-PICO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode面试必刷75题</title>
      <link href="/2023/06/03/Leetcode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B775%E9%A2%98/"/>
      <url>/2023/06/03/Leetcode/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B775%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-交替合并字符串-简单"><a href="#🚀-交替合并字符串-简单" class="headerlink" title="🚀 交替合并字符串 - 简单"></a>🚀 交替合并字符串 - 简单</h2><p><strong>题目：</strong></p><p>给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。</p><p>如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p><p>返回 合并后的字符串 。</p><p><strong>示例 1：</strong></p><blockquote><p>  输入：word1 = “abc”, word2 = “pqr”<br>  输出：”apbqcr”<br>  合并后：  apbqcr</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>  输入：word1 = “ab”, word2 = “pqrs”<br>  输出：”apbqrs”<br>  解释：注意，word2 比 word1 长，”rs” 需要追加到合并后字符串的末尾。<br>  合并后：apbqrs</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>  输入：word1 = “abcd”, word2 = “pq”<br>  输出：”apbqcd”<br>  解释：注意，word1 比 word2 长，”cd” 需要追加到合并后字符串的末尾。<br>  合并后：apbqcd</p></blockquote><h3 id="题解-暴力求解"><a href="#题解-暴力求解" class="headerlink" title="题解 - 暴力求解"></a>题解 - 暴力求解</h3><p>定义一个数组或列表，依次读取word1和word2的字符并存储在该数组上，最后返回该数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeAlternately</span>(<span class="params">self, word1: <span class="built_in">str</span>, word2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        retstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        word1Len = <span class="built_in">len</span>(word1)</span><br><span class="line">        word2Len = <span class="built_in">len</span>(word2)</span><br><span class="line">        strLen   = word1Len + word2Len</span><br><span class="line">        word1Index = <span class="number">0</span></span><br><span class="line">        word2Index = <span class="number">0</span></span><br><span class="line">        strIndex   = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> strIndex &lt; strLen:</span><br><span class="line">            <span class="keyword">if</span> word1Index &lt; word1Len:</span><br><span class="line">                retstr += word1[word1Index]</span><br><span class="line">                word1Index += <span class="number">1</span></span><br><span class="line">                strIndex += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> word2Index &lt; word2Len:</span><br><span class="line">                retstr += word2[word2Index]</span><br><span class="line">                word2Index += <span class="number">1</span></span><br><span class="line">                strIndex += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> retstr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    word1List = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; a  &#x27;</span>]</span><br><span class="line">    word2List = [<span class="string">&#x27;pqr&#x27;</span>, <span class="string">&#x27;pqrs&#x27;</span>, <span class="string">&#x27;pq&#x27;</span>, <span class="string">&#x27;pqr&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;p q r&#x27;</span>]</span><br><span class="line">    word3List = [<span class="string">&#x27;apbqcr&#x27;</span>, <span class="string">&#x27;apbqrs&#x27;</span>, <span class="string">&#x27;apbqcd&#x27;</span>, <span class="string">&#x27;pqr&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; pa  q  r&#x27;</span>]</span><br><span class="line">    testNum = <span class="built_in">len</span>(word1List)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(testNum):</span><br><span class="line">        word3 = Solution().mergeAlternately(word1List[i], word2List[i])</span><br><span class="line">        <span class="keyword">if</span> word3 != word3List[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Error: <span class="subst">&#123;word1List[i]&#125;</span> + <span class="subst">&#123;word2List[i]&#125;</span> = <span class="subst">&#123;word3&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行用时：48 ms, 在所有 Python3 提交中击败了20.64%的用户</p><p>内存消耗：16.2 MB, 在所有 Python3 提交中击败了5.28%的用户</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">mergeAlternately</span><span class="params">(<span class="type">char</span> * word1, <span class="type">char</span> * word2)</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> word1Len = <span class="built_in">strlen</span>(word1);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> word2Len = <span class="built_in">strlen</span>(word2);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> lenSum   = word1Len + word2Len;</span><br><span class="line">    <span class="type">char</span> *retStr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(lenSum+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> index1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> index2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lenSum == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenSum;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index1 &lt; word1Len)</span><br><span class="line">        &#123;</span><br><span class="line">            retStr[i] = word1[index1];</span><br><span class="line">            i++;</span><br><span class="line">            index1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index2 &lt; word2Len)</span><br><span class="line">        &#123;</span><br><span class="line">            retStr[i] = word2[index2];</span><br><span class="line">            i++;</span><br><span class="line">            index2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    retStr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> word1List[][<span class="number">8</span>] = &#123;<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot; a  &quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> word2List[][<span class="number">8</span>] = &#123;<span class="string">&quot;pqr&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;pq&quot;</span>, <span class="string">&quot;pqr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;p q r&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> word3List[][<span class="number">16</span>] = &#123;<span class="string">&quot;apbqcr&quot;</span>, <span class="string">&quot;apbqrs&quot;</span>, <span class="string">&quot;apbqcd&quot;</span>, <span class="string">&quot;pqr&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot; pa  q  r&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> testNum = <span class="keyword">sizeof</span>(word1List) / <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> *pstr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; testNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pstr = mergeAlternately(word1List[i], word2List[i]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pstr, word3List[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;num%d error: mergeAlternately(\&quot;%s\&quot;, \&quot;%s\&quot;) = \&quot;%s\&quot; \r\n&quot;</span>, i, word1List[i], word2List[i], pstr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C 提交中击败了100.00%的用户</p><p>内存消耗：5.9 MB, 在所有 C 提交中击败了5.46%的用户</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>上面的解法用了一个变量来记录返回字符串的总长度，这个变量是可以被优化掉的，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeAlternately</span>(<span class="params">self, word1: <span class="built_in">str</span>, word2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        word1Len = <span class="built_in">len</span>(word1)</span><br><span class="line">        word2Len = <span class="built_in">len</span>(word2)</span><br><span class="line">        <span class="keyword">while</span> index &lt; word1Len <span class="keyword">or</span> index &lt; word2Len:</span><br><span class="line">            <span class="keyword">if</span> index &lt; word1Len:</span><br><span class="line">                res += word1[index]</span><br><span class="line">            <span class="keyword">if</span> index &lt; word2Len:</span><br><span class="line">                res += word2[index]</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>执行用时：36 ms, 在所有 Python3 提交中击败了82.96%的用户</p><p>内存消耗：16.1 MB, 在所有 Python3 提交中击败了13.34%的用户</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">mergeAlternately</span><span class="params">(<span class="type">char</span> * word1, <span class="type">char</span> * word2)</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> word1Len = <span class="built_in">strlen</span>(word1);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> word2Len = <span class="built_in">strlen</span>(word2);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *retStr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(word1Len + word2Len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; (i &lt; word1Len) || (i &lt; word2Len); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; word1Len)</span><br><span class="line">        &#123;</span><br><span class="line">            retStr[j++] = word1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; word2Len)</span><br><span class="line">        &#123;</span><br><span class="line">            retStr[j++] = word2[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    retStr[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C 提交中击败了100.00%的用户</p><p>内存消耗：5.6 MB, 在所有 C 提交中击败了66.55%的用户</p><h2 id="🚀-字符串的最大公因子-简单"><a href="#🚀-字符串的最大公因子-简单" class="headerlink" title="🚀 字符串的最大公因子 - 简单"></a>🚀 字符串的最大公因子 - 简单</h2><p><strong>题目：</strong></p><p>对于字符串 s 和 t，只有在 s = t + … + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。</p><p>给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。</p><p>示例 1：</p><blockquote><p>  输入：str1 = “ABCABC”, str2 = “ABC”<br>  输出：”ABC”</p></blockquote><p>示例 2：</p><blockquote><p>  输入：str1 = “ABABAB”, str2 = “ABAB”<br>  输出：”AB”</p></blockquote><p>示例 3：</p><blockquote><p>  输入：str1 = “LEET”, str2 = “CODE”<br>  输出：””</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目要求字符串 x 能除尽 str1 且 x 能除尽 str2，因此字符串 x 的长度必须为 str1 和 str2 的最大公因数。</p><p>以最大公因数对字符串 str1 进行切片，看看切片出来的字符串 str3 是否是 str1 和 str2 的子串。如果是，则str3 就是最大公因子。如果不是，则没有公因子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcdOfStrings</span>(<span class="params">self, str1: <span class="built_in">str</span>, str2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        str1Len = <span class="built_in">len</span>(str1)</span><br><span class="line">        str2Len = <span class="built_in">len</span>(str2)</span><br><span class="line">        divisor = gcd(str1Len, str2Len)<span class="comment"># 计算公因数</span></span><br><span class="line">        </span><br><span class="line">        retStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> str1[<span class="number">0</span> : divisor] == str2[<span class="number">0</span> : divisor]:</span><br><span class="line">            retStr = str1[<span class="number">0</span> : divisor]</span><br><span class="line">            index = divisor</span><br><span class="line">            <span class="keyword">while</span> index + divisor &lt;= str1Len:</span><br><span class="line">                <span class="keyword">if</span> retStr != str1[index : (index + divisor)]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">                index += divisor</span><br><span class="line">            index = divisor</span><br><span class="line">            <span class="keyword">while</span> index + divisor &lt;= str2Len:</span><br><span class="line">                <span class="keyword">if</span> retStr != str2[index : (index + divisor)]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">                index += divisor</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> retStr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    strList1 = [<span class="string">&#x27;ABCABC&#x27;</span>, <span class="string">&#x27;ABABAB&#x27;</span>, <span class="string">&#x27;LEET&#x27;</span>, <span class="string">&#x27;ABCABCABCABC&#x27;</span>, <span class="string">&#x27;ABCABCABCABC&#x27;</span>, <span class="string">&#x27;ABCABCABCABD&#x27;</span>]</span><br><span class="line">    strList2 = [<span class="string">&#x27;ABC&#x27;</span>, <span class="string">&#x27;ABAB&#x27;</span>, <span class="string">&#x27;CODE&#x27;</span>, <span class="string">&#x27;ABCABCABCABC&#x27;</span>, <span class="string">&#x27;ABCABC&#x27;</span>, <span class="string">&#x27;ABCABC&#x27;</span>]</span><br><span class="line">    strList3 = [<span class="string">&#x27;ABC&#x27;</span>, <span class="string">&#x27;AB&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;ABCABCABCABC&#x27;</span>, <span class="string">&#x27;ABCABC&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    listLen = <span class="built_in">len</span>(strList1)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(listLen):</span><br><span class="line">        str1 = Solution().gcdOfStrings(strList1[i], strList2[i])</span><br><span class="line">        <span class="keyword">if</span> str1 != strList3[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Error: Solution().gcdOfStrings(strList1[i], strList2[i]) = \&#x27;<span class="subst">&#123;str1&#125;</span>\&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行用时：44 ms, 在所有 Python3 提交中击败了50.83%的用户</p><p>内存消耗：16.2 MB, 在所有 Python3 提交中击败了7.65%的用户</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python离线安装库</title>
      <link href="/2023/05/17/%E7%AC%94%E8%AE%B0/python%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%BA%93/"/>
      <url>/2023/05/17/%E7%AC%94%E8%AE%B0/python%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><p>以DrissionPage库为例</p><p>首先在一个可以联网的电脑可以离线安装包以及依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用中科大镜像源下载离线安装包以及依赖库，下载到当前目录</span></span><br><span class="line">pip download -d ./ -i https://pypi.mirrors.ustc.edu.cn/simple/ DrissionPage</span><br></pre></td></tr></table></figure><p>新建 requirement.txt 文件。</p><p>然后将命令行上的包文件名按照倒序的方式复制到 requirement.txt 中。</p><p>可以将所有Saved开头的文字一起负责到 requirement.txt ，然后用 vscode 打开，将前面的文字一起删除，最后进行倒序即可。</p><p><img src="../../images/python离线安装库/image-20230515185628886.png" alt="image-20230515185628886"></p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172302543.png" alt="image-20230515185628886"></p><p>将文件夹拷贝到需要离线安装的电脑，并进入文件夹内，使用下面的命令进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt    <span class="comment">##按照脚本内安装包的顺序安装库</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python脚本</title>
      <link href="/2023/04/15/%E8%84%9A%E6%9C%AC/python%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/04/15/%E8%84%9A%E6%9C%AC/python%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h1 id="🚀-修改文件名"><a href="#🚀-修改文件名" class="headerlink" title="🚀 修改文件名"></a>🚀 修改文件名</h1><p>功能，打印当前目录下所有文件的文件名，并将文件名中的<span style="color:blue"> ‘.’ 和 ‘-‘ 之间的字符</span>替换成 ‘__’ （包括’.’ 和 ‘-‘ ）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录下的所有文件名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_names</span>(<span class="params">directory</span>):</span><br><span class="line">    <span class="comment"># 遍历目录下的所有文件，并将文件名添加到列表中</span></span><br><span class="line">    file_names = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(directory):</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(os.path.join(directory, filename)):</span><br><span class="line">            file_names.append(filename)</span><br><span class="line">    <span class="keyword">return</span> file_names</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有文件名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_file_names</span>(<span class="params">file_names</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_names:</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_file_name</span>(<span class="params">directory, old_name, new_name</span>):</span><br><span class="line">    <span class="comment"># 获取文件路径</span></span><br><span class="line">    old_path = os.path.join(directory, old_name)</span><br><span class="line">    new_path = os.path.join(directory, new_name)</span><br><span class="line">    <span class="comment"># 重命名文件</span></span><br><span class="line">    os.rename(old_path, new_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将要遍历的目录路径替换为您所需的目录</span></span><br><span class="line">directory = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"><span class="comment"># 定义正则表达式，用于匹配括号内的字符串</span></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\.(.*?)\-&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取所有文件名</span></span><br><span class="line">file_names = get_file_names(directory)</span><br><span class="line"><span class="comment"># 打印所有文件名</span></span><br><span class="line">print_file_names(file_names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历并修改文件名</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file_names)):</span><br><span class="line">    <span class="comment"># 获取原始文件名</span></span><br><span class="line">    old_name = file_names[i]</span><br><span class="line">    <span class="comment"># 查找括号内的字符串</span></span><br><span class="line">    <span class="keyword">match</span> = regex.search(old_name)</span><br><span class="line">    <span class="comment"># 移除不需要的字符</span></span><br><span class="line">    new_name = old_name.replace(<span class="keyword">match</span>.group(), <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    <span class="comment"># 修改文件名</span></span><br><span class="line">    modify_file_name(directory, old_name, new_name)</span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="🚀-png转jpg并修改文件名为数字序列"><a href="#🚀-png转jpg并修改文件名为数字序列" class="headerlink" title="🚀 png转jpg并修改文件名为数字序列"></a>🚀 png转jpg并修改文件名为数字序列</h1><p>文件夹下的所有文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;./featureimages&#x27;</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line">i = <span class="number">1</span>       // 如果重命名失败，说明文件夹内有同名的文件，可以先将这个值设置大一点，之后再调回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹下的所有文件按照从 1 开始的数字命名，后缀不变</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    old_name = os.path.join(path, file)</span><br><span class="line">    extension = os.path.splitext(file)[<span class="number">1</span>]</span><br><span class="line">    new_name = os.path.join(path, <span class="built_in">str</span>(i) + extension)</span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line">    os.rename(old_name, new_name)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹内的 png 图片转换为 jpg</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(os.path.join(path, filename))</span><br><span class="line">        img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">        new_filename = os.path.splitext(filename)[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        img.save(os.path.join(path, new_filename))</span><br><span class="line">        os.remove(os.path.join(path, filename))</span><br></pre></td></tr></table></figure><h1 id="🚀-xlsx文件挑选特定范围的值"><a href="#🚀-xlsx文件挑选特定范围的值" class="headerlink" title="🚀 xlsx文件挑选特定范围的值"></a>🚀 xlsx文件挑选特定范围的值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">title1 = <span class="string">&#x27;T_P_SLC&#x27;</span></span><br><span class="line">title2 = <span class="string">&#x27;T_R_SLC&#x27;</span></span><br><span class="line"></span><br><span class="line">threshold1  = <span class="number">130</span></span><br><span class="line">threshold2  = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">xlsx_file_path  = <span class="string">&quot;./Xlsx/&quot;</span></span><br><span class="line">out_path_xlsx   = <span class="string">&#x27;./OutPut/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除输出文件夹内所有的文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(out_path_xlsx):</span><br><span class="line">    file_path = os.path.join(out_path_xlsx, filename)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            os.unlink(file_path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;rm <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Failed to delete <span class="subst">&#123;file_path&#125;</span>. Reason: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览并处理目标文件夹内的文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(xlsx_file_path):</span><br><span class="line">    file_path = os.path.join(xlsx_file_path, filename)</span><br><span class="line">    out_file_path = os.path.join(out_path_xlsx, filename)</span><br><span class="line">    <span class="built_in">print</span>(file_path)</span><br><span class="line">    <span class="built_in">print</span>(out_file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取Excel文件  </span></span><br><span class="line">    df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将文本格式转换为整数  </span></span><br><span class="line">    df[title1] = df[title1].astype(<span class="built_in">int</span>)  </span><br><span class="line">    df[title2] = df[title2].astype(<span class="built_in">int</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 筛选大于阈值的行</span></span><br><span class="line">    df_filtered = df[(df[title1] &gt; threshold1) | (df[title2] &gt; threshold2)]  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存筛选后的数据到新的Excel文件  </span></span><br><span class="line">    df_filtered.to_excel(out_file_path, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="🚀-统计Dat文件中各个数值的数量"><a href="#🚀-统计Dat文件中各个数值的数量" class="headerlink" title="🚀 统计Dat文件中各个数值的数量"></a>🚀 统计Dat文件中各个数值的数量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.dat&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">counter = collections.Counter(data)</span><br><span class="line">x = <span class="built_in">list</span>(counter.keys())</span><br><span class="line">y = <span class="built_in">list</span>(counter.values())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(counter.keys()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> : <span class="subst">&#123;counter[key]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.bar(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="🚀-将txt文件以空格进行分隔并批量转换为xlsx文件"><a href="#🚀-将txt文件以空格进行分隔并批量转换为xlsx文件" class="headerlink" title="🚀 将txt文件以空格进行分隔并批量转换为xlsx文件"></a>🚀 将txt文件以空格进行分隔并批量转换为xlsx文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">out_path_txt = <span class="string">&#x27;./Out/Txt/&#x27;</span></span><br><span class="line">out_path_xlsx = <span class="string">&#x27;./Out/Xlsx/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 ./Out/Xlsx/ 文件夹内所有的文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(out_path_xlsx):</span><br><span class="line">    file_path = os.path.join(out_path_xlsx, filename)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            os.unlink(file_path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;rm <span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Failed to delete <span class="subst">&#123;file_path&#125;</span>. Reason: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览并处理目标文件夹内的文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(out_path_txt):</span><br><span class="line">    file_path = os.path.join(out_path_txt, filename)</span><br><span class="line">    outPut_path = os.path.join(out_path_xlsx, filename)[<span class="number">0</span>:-<span class="number">3</span>] + <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;create <span class="subst">&#123;outPut_path&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取CSV文件  </span></span><br><span class="line">    df = pd.read_csv(file_path, sep=<span class="string">&quot; &quot;</span>, header=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 将DataFrame保存为xlsx文件  </span></span><br><span class="line">    df.to_excel(outPut_path, index=<span class="literal">False</span>, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="🚀-将图片转换为c文件"><a href="#🚀-将图片转换为c文件" class="headerlink" title="🚀 将图片转换为c文件"></a>🚀 将图片转换为c文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image  </span><br><span class="line">import os  </span><br><span class="line"></span><br><span class="line"># 定义一个函数，将RGB888格式转换为RGB565格式</span><br><span class="line">def <span class="title function_">rgb888_to_rgb565</span><span class="params">(r, g, b, Little_Endian=<span class="number">0</span>)</span>:</span><br><span class="line">    # 将8位的R,G,B值分别右移3,2,3位，得到5位的R,G,B值</span><br><span class="line">    r = r &gt;&gt; <span class="number">3</span></span><br><span class="line">    g = g &gt;&gt; <span class="number">2</span></span><br><span class="line">    b = b &gt;&gt; <span class="number">3</span></span><br><span class="line">    # 将<span class="number">5</span>位的R,G,B值拼接成<span class="number">16</span>位的RGB565值，高位在前，低位在后</span><br><span class="line">    rgb565 = (r &lt;&lt; <span class="number">11</span>) | (g &lt;&lt; <span class="number">5</span>) | b</span><br><span class="line">    # 小端模式需要调换高低位</span><br><span class="line">    <span class="keyword">if</span> Little_Endian != <span class="number">0</span>:</span><br><span class="line">        rgb565 = (rgb565 &gt;&gt; <span class="number">8</span>) | ((rgb565 &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">    # 返回RGB565值</span><br><span class="line">    <span class="keyword">return</span> rgb565</span><br><span class="line"></span><br><span class="line"># 将图像文件以RGB565的格式写入到.c文件 </span><br><span class="line">def img_to_cFile(img_name, cFile_name):</span><br><span class="line">    # 打开图像文件并转换为RGB模式  </span><br><span class="line">    img = Image.open(img_name).convert(<span class="string">&quot;RGB&quot;</span>)  </span><br><span class="line">    # 获取图像的宽度和高度  </span><br><span class="line">    width, height = img.size  </span><br><span class="line">    with open(cFile_name, <span class="string">&quot;w&quot;</span>) as f:  </span><br><span class="line">        f.write(f<span class="string">&quot;// width = &#123;width&#125;, height = &#123;height&#125;\n&quot;</span>)</span><br><span class="line">        f.write(f<span class="string">&quot;const unsigned short img_&#123;os.path.basename(cFile_name)[:-2]&#125;[] = &#123;&#123;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> y in range(height):  </span><br><span class="line">            <span class="keyword">for</span> x in range(width):  </span><br><span class="line">                # 获取当前像素的RGB值  </span><br><span class="line">                r, g, b = img.getpixel((x, y))  </span><br><span class="line">                </span><br><span class="line">                # 将RGB值转换为RGB565格式  </span><br><span class="line">                rgb565 = rgb888_to_rgb565(r, g, b, <span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">                # 每<span class="number">16</span>个数据添加一个换行</span><br><span class="line">                <span class="keyword">if</span> (x % <span class="number">16</span> == <span class="number">0</span>):</span><br><span class="line">                    f.write(<span class="string">&quot;\n    &quot;</span>)</span><br><span class="line"></span><br><span class="line">                # 将RGB565格式写入文件 </span><br><span class="line">                <span class="keyword">if</span> x == width - <span class="number">1</span> and y == height - <span class="number">1</span>:      # 最后一个数据不用加逗号</span><br><span class="line">                    f.write(<span class="string">&quot;0x&#123;:04x&#125;\n&quot;</span>.format(rgb565))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f.write(<span class="string">&quot;0x&#123;:04x&#125;, &quot;</span>.format(rgb565))</span><br><span class="line">        f.write(<span class="string">&quot;&#125;;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 删除文件夹内所有的文件</span><br><span class="line">def rm_path_file(path_name):</span><br><span class="line">    <span class="keyword">for</span> filename in os.listdir(path_name):</span><br><span class="line">        file_path = os.path.join(path_name, filename)</span><br><span class="line">        try:</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                os.unlink(file_path)</span><br><span class="line">                print(f<span class="number">&#x27;</span>rm &#123;file_path&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        except Exception as e:</span></span><br><span class="line"><span class="string">            print(f&#x27;</span>Failed to delete &#123;file_path&#125;. Reason: &#123;e&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 定义文件夹路径  </span></span><br><span class="line"><span class="string">img_path = &#x27;</span>./img/<span class="string">&#x27;        # 放置图片的目录</span></span><br><span class="line"><span class="string">cFile_path = &#x27;</span>./cFile/<span class="string">&#x27;    # 生成.c文件的目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;</span>__main__<span class="number">&#x27;</span>: </span><br><span class="line">    rm_path_file(cFile_path)    # 删除c文件夹内原有的文件</span><br><span class="line">    # 获取文件夹内的所有文件  </span><br><span class="line">    files = os.listdir(img_path)  </span><br><span class="line">    # 打印每个文件名  </span><br><span class="line">    <span class="keyword">for</span> file in files:  </span><br><span class="line">        img_name = os.path.join(img_path, file)</span><br><span class="line">        # 检查是否为文件，排除子文件夹  </span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(img_name):  </span><br><span class="line">            cFile_name = os.path.splitext(file)[<span class="number">0</span>] + <span class="string">&#x27;.c&#x27;</span></span><br><span class="line">            cFile_name = os.path.join(cFile_path, cFile_name)</span><br><span class="line">            img_to_cFile(img_name, cFile_name)</span><br><span class="line">            print(cFile_name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="🚀-将图片转换为webp格式"><a href="#🚀-将图片转换为webp格式" class="headerlink" title="🚀 将图片转换为webp格式"></a>🚀 将图片转换为webp格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先需要确保已经安装了Pillow库，如果还没有安装，可以使用pip命令安装：</span></span><br><span class="line"><span class="comment"># pip install Pillow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_webp</span>(<span class="params">input_folder, output_folder</span>):</span><br><span class="line">    <span class="comment"># 确保输出文件夹存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历输入文件夹中的所有文件</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_folder):</span><br><span class="line">        <span class="keyword">if</span> filename.lower().endswith((<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>)):</span><br><span class="line">            <span class="comment"># 构建输入和输出文件的完整路径</span></span><br><span class="line">            input_path = os.path.join(input_folder, filename)</span><br><span class="line">            output_path = os.path.join(output_folder, <span class="string">f&quot;<span class="subst">&#123;os.path.splitext(filename)[<span class="number">0</span>]&#125;</span>.webp&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打开图片并转换为webp格式</span></span><br><span class="line">            <span class="keyword">with</span> Image.<span class="built_in">open</span>(input_path) <span class="keyword">as</span> img:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;open img&#x27;</span>)</span><br><span class="line">                img.save(output_path, <span class="string">&#x27;webp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Converted <span class="subst">&#123;filename&#125;</span> to webp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">convert_to_webp(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;./out/&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2023/04/11/%E7%AC%94%E8%AE%B0/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/11/%E7%AC%94%E8%AE%B0/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-HTML简介"><a href="#🚀-HTML简介" class="headerlink" title="🚀 HTML简介"></a>🚀 HTML简介</h2><ul><li>HTML 的英文全称是 Hyper Text Markup Language，即超文本标记语言。</li><li>HTML 是所有网站的基础，我们所看到的所有网站都是由 HTML 构成的。</li><li>HTML 最初于1989年由 CERN 的 Tim Berners-Lee 发明。HTML 基于更古老一些的语言 SGML 定义，并简化了其中的语言元素。这些元素用于告诉浏览器如何在用户的屏幕上展示数据，所以很早就得到各个Web浏览器厂商的支持。</li></ul><h2 id="🚀-第一个程序"><a href="#🚀-第一个程序" class="headerlink" title="🚀 第一个程序"></a>🚀 第一个程序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;测试图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.hilinkk.cn/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>首页网址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_intro" target="_blank">在线测试链接</a></p><p>效果如下：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172256870.png" alt="image-20230412004216570"></p><h2 id="🚀-个人相册"><a href="#🚀-个人相册" class="headerlink" title="🚀 个人相册"></a>🚀 个人相册</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 网页样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.card</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>; <span class="comment">/* 设置图片高度 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/* 设置图片高度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">object-fit</span>: cover; <span class="comment">/* 填充整个图片区域 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 图片展示区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片1描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片2描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片3描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片4描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片5描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hilinkk.cn/medias/banner/6.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>图片6描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加更多图片 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class=&quot;card&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;img src=&quot;imgNum.jpg&quot; alt=&quot;图片&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class=&quot;desc&quot;&gt;图片描述&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172257772.png" alt="image-20230415163659355"></p><h2 id="🚀-资料汇总"><a href="#🚀-资料汇总" class="headerlink" title="🚀 资料汇总"></a>🚀 资料汇总</h2><h3 id="✈️-学习网站"><a href="#✈️-学习网站" class="headerlink" title="✈️ 学习网站"></a>✈️ 学习网站</h3><p>W3C：www.w3c.org</p><p>W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><p>MDN：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>HTML5 教程：<a href="https://www.runoob.com/html/html5-intro.html">https://www.runoob.com/html/html5-intro.html</a></p><p>HTMl文档地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></p><h3 id="✈️-视频教程"><a href="#✈️-视频教程" class="headerlink" title="✈️ 视频教程"></a>✈️ 视频教程</h3><p>B站 - 超简单HTML入门教程：<a href="https://www.bilibili.com/video/BV1gP4y1E75S/">https://www.bilibili.com/video/BV1gP4y1E75S/</a></p><p>B站 - pink老师前端入门教程：<a href="https://www.bilibili.com/video/BV14J4114768/">https://www.bilibili.com/video/BV14J4114768/</a></p><p>B站 - 尚硅谷前端html+css零基础教程：<a href="https://www.bilibili.com/video/BV1p84y1P7Z5/">https://www.bilibili.com/video/BV1p84y1P7Z5/</a></p><h3 id="✈️-工具"><a href="#✈️-工具" class="headerlink" title="✈️ 工具"></a>✈️ 工具</h3><p>在线编辑工具：<a href="https://www.runoob.com/try/try.php?filename=tryhtml_intro">https://www.runoob.com/try/try.php?filename=tryhtml_intro</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数生成算法</title>
      <link href="/2023/04/11/%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/11/%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-较为真实的随机数获取"><a href="#🚀-较为真实的随机数获取" class="headerlink" title="🚀 较为真实的随机数获取"></a>🚀 较为真实的随机数获取</h2><p>一个随机数需要满足以下特点：</p><p>1、在规定的数值范围内，每个数值出现的概率相同，经过一定次数的生成之后可以覆盖该范围内的所有值。</p><p>2、不能通过任何算法推导出下一个数字。</p><p>由于上述第二个条件的限制，真正的随机数是不能通过算法生成的。一般可以用硬件信息来获取，例如：</p><p>1、定时器的值。</p><p>2、获取ADC采样的值。</p><p>3、加速度传感器的值。</p><p>不过由于这些数值短时间内的变化不是很大，因此不能在短时间内连续获取。</p><h2 id="🚀-伪随机数算法"><a href="#🚀-伪随机数算法" class="headerlink" title="🚀 伪随机数算法"></a>🚀 伪随机数算法</h2><p>一个良好的随机数发生器应当具备以下几个特性：</p><p>1、产生的随机数要具有均匀总体随机样本的统计性质，如分布的均匀性，抽样的随机性，数列间的独立性等。<br>2、产生的数列要有足够长的周期，以满足模拟计算的需要。<br>3、产生数列的速度要快，占用计算机的内存少，具有完全可重复性。</p><h3 id="✈️-线性同余法（LCG）"><a href="#✈️-线性同余法（LCG）" class="headerlink" title="✈️ 线性同余法（LCG）"></a>✈️ 线性同余法（LCG）</h3><p>​        线性同余法是目前应用最广泛的方法之一，很多编程语言的随机数生成 API 也有采用这种方法，它利用数论中的同余运算来产生随机数，所以称为同余发生器，一般递推公式为: </p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172313873.webp" alt="image-20230411202308654"></p><p>​        其中 a、c、m 都是常数，$x_n$ 是产生的随机数序列。即用上一个随机数  x~n-1~ 根据公式计算出随机数 x~n~，一开始时要给个初值 x~0~，也叫随机数种子。因为后面加了个取余 m 的运算，所以产生的随机数范围是 0 到 m。C语言的 rand() 函数也采用了这种方法，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> next = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// RAND_MAX assumed to be 32767</span></span><br><span class="line">&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)(next / <span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 改变seed的值，可传入定时器的值</span><br><span class="line"><span class="type">void</span> <span class="title function_">srand</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed)</span></span><br><span class="line">&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可调整 a、c 的值来改变随机数的均匀性，当 a = 9，c = 7 效果较为理想。</p><p>下面是用来验证此算法的 python 程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">wTestNum = <span class="number">1000</span>     <span class="comment"># 测试次数</span></span><br><span class="line">wrange = <span class="number">128</span>        <span class="comment"># 随机数范围</span></span><br><span class="line">RandSeed = <span class="number">0x1234</span>   <span class="comment"># 随机种子，随便取一个数，单片机可以利用定时器或者ADC获取</span></span><br><span class="line">wTempValue = <span class="number">0</span></span><br><span class="line">wpTempdata = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myRand</span>(<span class="params">numRange</span>):</span><br><span class="line">    <span class="keyword">global</span> RandSeed</span><br><span class="line">    RandSeed = ((RandSeed * <span class="number">1103515245</span>) + <span class="number">12345</span>)  <span class="comment"># 重新计算随机数种子</span></span><br><span class="line">    <span class="comment"># return ((wseed // 65536) % numRange)</span></span><br><span class="line">    <span class="keyword">return</span> ((RandSeed &gt;&gt; <span class="number">16</span>) % numRange)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(wTestNum):</span><br><span class="line">    wTempValue = myRand(wrange)</span><br><span class="line">    <span class="comment"># 统计各个数字出现的次数</span></span><br><span class="line">    <span class="keyword">if</span> wTempValue <span class="keyword">in</span> wpTempdata:</span><br><span class="line">        wpTempdata[wTempValue] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wpTempdata[wTempValue] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(wpTempdata)</span></span><br><span class="line">plt.bar([x <span class="keyword">for</span> x <span class="keyword">in</span> wpTempdata], [wpTempdata[x] <span class="keyword">for</span> x <span class="keyword">in</span> wpTempdata])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;随机数值&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;产生的次数/次&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当测试次数为1000 时，生成的图片如下图所示：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172313422.webp" alt="image-20230403202319366"></p><p>当测试次数为10000 时，生成的图片如下图所示：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172313210.webp" alt="image-20230403202446600"></p><p>由上面两图分析可得：此算法算出来的随机数具有均匀总体随机样本的统计性质，主要<strong>优点</strong>有：</p><p>1、算法简单，占用内存小，运算量小。</p><p>主要缺点有：</p><p>1、此伪随机序列具有周期性，建议每间隔一段时间就改变一次随机种子的值。</p><p>2、各个数字出现的概率相差较大。</p><p>3、算法简单，容易被反推出 a 和 c 的值，进而被破解算出下一个“随机数”。</p><p>因此，线性同余法算法适用于对系统实时性要求高，算力较低，要求不严格的场合。可以将定时器值或其他硬件数值作为随机种子，提高数值的随机性。</p><p>且经本人测试，去掉 “&gt;&gt; 16” 这条语句之后，各随机数出现概率就完全一致了，不过这有利有弊，只适用于生成不会重复的数列，例如随机翻转一段内存中的随机几个 bit。</p><h3 id="✈️-反馈位移寄存器法（FSR）"><a href="#✈️-反馈位移寄存器法（FSR）" class="headerlink" title="✈️ 反馈位移寄存器法（FSR）"></a>✈️ 反馈位移寄存器法（FSR）</h3><p>​        反馈位移寄存器法通过对寄存器进行位移，直接在存储单元中形成随机数，速度很快，因此很多MCU主控里集成的随机数模块都采用了类似的方法。</p><p>python测试程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">wTestNum = <span class="number">40000</span>    <span class="comment"># 测试次数</span></span><br><span class="line">wrange = <span class="number">128</span>        <span class="comment"># 随机数范围</span></span><br><span class="line">wseed = <span class="number">0x1234</span>      <span class="comment"># 随机种子，随便取一个数，单片机可以利用定时器或者ADC获取</span></span><br><span class="line">wTempValue = <span class="number">0</span></span><br><span class="line">wpTempdata = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myRand</span>(<span class="params">numRange</span>):</span><br><span class="line">    <span class="keyword">global</span> wseed</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        wseed = ((wseed &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">        wseed |= (((wseed &gt;&gt; <span class="number">15</span>) ^ (wseed &gt;&gt; <span class="number">14</span>)) &amp; <span class="number">0x01</span>)</span><br><span class="line">    Num = wseed % numRange</span><br><span class="line">    <span class="keyword">return</span> Num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(wTestNum):</span><br><span class="line">    wTempValue = myRand(wrange)</span><br><span class="line">    <span class="comment"># 统计各个数字出现的次数</span></span><br><span class="line">    <span class="keyword">if</span> wTempValue <span class="keyword">in</span> wpTempdata:</span><br><span class="line">        wpTempdata[wTempValue] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wpTempdata[wTempValue] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(wpTempdata)</span></span><br><span class="line">plt.bar([x <span class="keyword">for</span> x <span class="keyword">in</span> wpTempdata], [wpTempdata[x] <span class="keyword">for</span> x <span class="keyword">in</span> wpTempdata])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;随机数值&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;产生的次数/次&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当 wTestNum = 1000 时，生成的图片如下图所示：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172313475.webp" alt="image-20230406134925793"></p><p>当 wTestNum = 10000 时，生成的图片如下图所示：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172313017.webp" alt="image-20230406135026654"></p><p>综上所述，反馈位移寄存器法具有以下优点：</p><p>1、反馈位移寄存器法可以通过对寄存器进行位移，直接在存储单元中形成随机数，速度很快，因此很多MCU主控里集成的随机数模块都采用了此方法。</p><p>缺点是：</p><p>1、如果靠软件生成会比较慢。</p><h3 id="✈️-组合随机数发生器"><a href="#✈️-组合随机数发生器" class="headerlink" title="✈️ 组合随机数发生器"></a>✈️ 组合随机数发生器</h3><p>​        将不同的随机数发生器进行级联组合，用一种随机数发生器产生的随机数作为下一个随机数发生器的种子或者用来扰乱另一个随机数发生器，以此来获得比单一随机数发生器更好的效果。例如两个线性同余发生器进行组合，第一个随机数发生器产生随机数作为下一个发生器的c参数来对下一个随机数发生器进行扰动，以获得比单一随机数发生器更长的随机数周期。</p><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><ul><li>随机数生成方法及其应用：<a href="https://blog.csdn.net/qq_34254642/article/details/104011261">https://blog.csdn.net/qq_34254642/article/details/104011261</a></li><li><p>一种基于线性反馈位移寄存器的随机数生成方法：<a href="https://blog.csdn.net/qq_34254642/article/details/106819635">https://blog.csdn.net/qq_34254642/article/details/106819635</a></p></li><li><p>如何生成随机数+原理详细分析：<a href="https://blog.csdn.net/chenlong_cxy/article/details/112862909">https://blog.csdn.net/chenlong_cxy/article/details/112862909</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件和主题</title>
      <link href="/2023/04/01/%E7%AC%94%E8%AE%B0/vscode%E6%8F%92%E4%BB%B6%E5%92%8C%E4%B8%BB%E9%A2%98/"/>
      <url>/2023/04/01/%E7%AC%94%E8%AE%B0/vscode%E6%8F%92%E4%BB%B6%E5%92%8C%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-插件"><a href="#🚀-插件" class="headerlink" title="🚀 插件"></a>🚀 插件</h2><h3 id="✈️-Chinese-Simplified"><a href="#✈️-Chinese-Simplified" class="headerlink" title="✈️ Chinese (Simplified)"></a>✈️ Chinese (Simplified)</h3><p>适用于 VS Code 的中文（简体）语言包。</p><h3 id="✈️-C-C"><a href="#✈️-C-C" class="headerlink" title="✈️ C/C++"></a>✈️ C/C++</h3><p>用于编写C程序。</p><h3 id="✈️-Icons"><a href="#✈️-Icons" class="headerlink" title="✈️ Icons"></a>✈️ Icons</h3><p>精美文件图标。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172311850.webp" alt="image-20230401204749400"></p><h3 id="✈️-Rainbow-Brackets"><a href="#✈️-Rainbow-Brackets" class="headerlink" title="✈️ Rainbow Brackets"></a>✈️ Rainbow Brackets</h3><p>彩虹括号，这为代码的结构提供了改进的视觉体验。</p><p><span style="color:red">此功能已经内置在vscode中了，不需要再安装。不过需要在设置中打开，如下图所示。</span></p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172306535.webp" alt="image-20230405153131748"></p><p>然后在 setting.json 文件中加入下面配置，可自定义为自己喜欢的颜色。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffd700&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#da70d6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#179fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#24d600&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00d8d8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ee0255&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172307193.webp" alt="image-20230405155132515"></p><h3 id="✈️-Tabnine-AI"><a href="#✈️-Tabnine-AI" class="headerlink" title="✈️ Tabnine AI"></a>✈️ Tabnine AI</h3><p>AI 智能代码补全工具。</p><h3 id="✈️-Indent-rainbow"><a href="#✈️-Indent-rainbow" class="headerlink" title="✈️ Indent-rainbow"></a>✈️ Indent-rainbow</h3><p>通过添加彩色标签缩进使您的代码更具可读性。安装后，每个选项卡缩进都会在编辑器中呈现不同的颜色。</p><p>此扩展将帮助我们更快地了解代码结构的流程。</p><p>可在 vscode 的 setting.json 中修改颜色和透明度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;indentRainbow.colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rgba(255,255,64,0.2)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;rgba(127,255,127,0.2)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;rgba(79,236,236,0.2)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;rgba(0,191,255,0.2)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;indentRainbow.errorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(255,0,0,0.3)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;indentRainbow.tabmixColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(255,0,0,0.3)&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="✈️-background"><a href="#✈️-background" class="headerlink" title="✈️ background"></a>✈️ background</h3><p>可爱萝莉背景。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172307853.webp" alt="40583704-6accf3a4-61c6-11e8-8c00-a636b9c3ec65"></p><h3 id="✈️-Code-Runner"><a href="#✈️-Code-Runner" class="headerlink" title="✈️ Code Runner"></a>✈️ Code Runner</h3><p>用于运行代码。</p><h3 id="✈️-highlight-words"><a href="#✈️-highlight-words" class="headerlink" title="✈️ highlight-words"></a>✈️ highlight-words</h3><p>用于高亮显示选中的文字。</p><p>下载插件之后还需配置快捷键，在键盘快捷方式中搜索 <strong>Highlight Toggle Current</strong> ，然后配置快捷键即可，我使用的是 <kbd>Ctrl</kbd><kbd>q</kbd> 。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172307195.webp" alt="image-20230410202049973"></p><p>然后还需在setting.json 文件中配置高亮显示的颜色。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;highlightwords.colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3d9ff&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3d9ff&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e6ffb3&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e6ffb3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3b3ff&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3b3ff&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffd9b3&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffd9b3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffb3ff&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffb3ff&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffff80&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffff80&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3ffd3&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b3ffd3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffb3bf&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffb3bf&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;highlightwords.box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="✈️-Live-Server"><a href="#✈️-Live-Server" class="headerlink" title="✈️ Live Server"></a>✈️ Live Server</h3><p>Live Server 的作用是可以边编写 HTML 程序，边查看效果，可以节省调试的时间。</p><ul><li>使用方法<ul><li>首先在浏览器中打开此网址：<a href="http://127.0.0.1:5500/">http://127.0.0.1:5500/</a></li><li>然后在 vscode 中右键，选择 Open with Live Server 即可，后续无需再进行此步骤。</li></ul></li></ul><h3 id="✈️-HTML-CSS-Support"><a href="#✈️-HTML-CSS-Support" class="headerlink" title="✈️ HTML CSS Support"></a>✈️ HTML CSS Support</h3><p>可以在编写 HTML 代码的时候，智能提示 css 的 id 以及类名。</p><h3 id="✈️-image-preview"><a href="#✈️-image-preview" class="headerlink" title="✈️ image preview"></a>✈️ image preview</h3><p>图片预览。</p><h3 id="✈️-toggle-quotes"><a href="#✈️-toggle-quotes" class="headerlink" title="✈️ toggle quotes"></a>✈️ toggle quotes</h3><p>引号切换。</p><h3 id="✈️-Rainbow-Fart"><a href="#✈️-Rainbow-Fart" class="headerlink" title="✈️ Rainbow Fart"></a>✈️ Rainbow Fart</h3><p>一个在你编程时持续夸你写的牛逼的扩展，容易社死，谨慎安装。</p><h2 id="🚀-主题"><a href="#🚀-主题" class="headerlink" title="🚀 主题"></a>🚀 主题</h2><h3 id="✈️-Ayu主题"><a href="#✈️-Ayu主题" class="headerlink" title="✈️ Ayu主题"></a>✈️ Ayu主题</h3><p>一个简单的主题与明亮的颜色，有三个版本—— 黑暗，光线和海市蜃楼—— 全天舒适的工作。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172310172.webp" alt="7d8c9227cf470342697a8cffd73b41e7"></p><h3 id="✈️-Noctis主题"><a href="#✈️-Noctis主题" class="headerlink" title="✈️ Noctis主题"></a>✈️ Noctis主题</h3><p>Noctis有11个版本，8个是黑暗的，3个是光明的。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172310524.webp" alt="noctisLux"></p><h3 id="✈️-One-Dark-Pro"><a href="#✈️-One-Dark-Pro" class="headerlink" title="✈️ One Dark Pro"></a>✈️ One Dark Pro</h3><p>一款暗黑风格的主题。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172311987.webp" alt="editor1"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DrissionPage库的使用</title>
      <link href="/2023/04/01/%E7%AC%94%E8%AE%B0/DrissionPage%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/01/%E7%AC%94%E8%AE%B0/DrissionPage%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-DrissionPage库简介"><a href="#🚀-DrissionPage库简介" class="headerlink" title="🚀 DrissionPage库简介"></a>🚀 DrissionPage库简介</h2><ul><li><p>官方介绍：</p><ul><li>DrissionPage 是一个基于 python 的网页自动化工具。</li><li>它既能控制浏览器，也能收发数据包，还能把两者合而为一。</li><li>可兼顾浏览器自动化的便利性和 requests 的高效率。</li><li>它功能强大，内置无数人性化设计和便捷功能。</li><li>它的语法简洁而优雅，代码量少，对新手友好。</li></ul></li><li><p>python 版本：3.6 及以上</p></li><li><p>支持浏览器：Chromium 内核（如 Chrome 和 Edge）</p></li><li><p>git仓库：<a href="https://gitee.com/g1879/DrissionPage">https://gitee.com/g1879/DrissionPage</a></p></li><li><p>使用说明：<a href="https://www.drissionpage.cn/">https://www.drissionpage.cn/</a></p></li></ul><h2 id="🚀-环境搭建"><a href="#🚀-环境搭建" class="headerlink" title="🚀 环境搭建"></a>🚀 环境搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">pip install DrissionPage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pip安装速度太慢，就使用清华源来安装，如下</span></span><br><span class="line">pip install DrissionPage -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">pip install DrissionPage --upgrade</span><br></pre></td></tr></table></figure><p>新建一个python文件，填写以下代码并运行。如果可以正常启动了浏览器并且访问了百度页面，说明可直接使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"></span><br><span class="line">page = ChromiumPage()</span><br><span class="line">page.get(<span class="string">&#x27;http://baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果上面的步骤提示出错，说明程序没在系统里找到浏览器，需要手动配置浏览器路径。</p><p>新建一个临时 py 文件，并输入以下代码，填入您电脑里的浏览器 exe 文件路径，然后执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这段代码只要运行一次即可，不用写到正式程序里。</span></span><br><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumOptions</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;D:\Chrome\Chrome.exe&#x27;</span>  <span class="comment"># 请改为你电脑内Chrome可执行文件路径</span></span><br><span class="line">ChromiumOptions().set_browser_path(path).save()</span><br></pre></td></tr></table></figure><h2 id="🚀-使用示例"><a href="#🚀-使用示例" class="headerlink" title="🚀 使用示例"></a>🚀 使用示例</h2><p>官方教程：<a href="http://g1879.gitee.io/drissionpagedocs/demos/douban_book_pics/">http://g1879.gitee.io/drissionpagedocs/demos/douban_book_pics/</a></p><h3 id="✈️-登录gitee"><a href="#✈️-登录gitee" class="headerlink" title="✈️ 登录gitee"></a>✈️ 登录gitee</h3><p>把以下代码复制到编辑器，把账号和密码改为您自己的，可直接执行看到运行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建页面对象，并启动或接管浏览器</span></span><br><span class="line">page = ChromiumPage()</span><br><span class="line"><span class="comment"># 跳转到登录页面</span></span><br><span class="line">page.get(<span class="string">&#x27;https://gitee.com/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到账号文本框，获取文本框元素</span></span><br><span class="line">ele = page.ele(<span class="string">&#x27;#user_login&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入对文本框输入账号</span></span><br><span class="line">ele.<span class="built_in">input</span>(<span class="string">&#x27;您的账号&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位到密码文本框并输入密码</span></span><br><span class="line">page.ele(<span class="string">&#x27;#user_password&#x27;</span>).<span class="built_in">input</span>(<span class="string">&#x27;您的密码&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击登录按钮</span></span><br><span class="line">page.ele(<span class="string">&#x27;@value=登 录&#x27;</span>).click()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="✈️-下载星巴克产品图片"><a href="#✈️-下载星巴克产品图片" class="headerlink" title="✈️ 下载星巴克产品图片"></a>✈️ 下载星巴克产品图片</h3><p>以下代码可直接运行并查看结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> SessionPage</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> search</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以s模式创建页面对象</span></span><br><span class="line">page = SessionPage()</span><br><span class="line"><span class="comment"># 访问目标网页</span></span><br><span class="line">page.get(<span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有class属性为preview circle的元素</span></span><br><span class="line">divs = page.eles(<span class="string">&#x27;.preview circle&#x27;</span>)</span><br><span class="line"><span class="comment"># 遍历这些元素</span></span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    <span class="comment"># 用相对定位获取当前div元素后一个兄弟元素，并获取其文本</span></span><br><span class="line">    name = div.<span class="built_in">next</span>().text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在div元素的style属性中提取图片网址并进行拼接</span></span><br><span class="line">    img_url = div.attr(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">    img_url = search(<span class="string">r&#x27;&quot;(.*)&quot;&#x27;</span>, img_url).group(<span class="number">1</span>)</span><br><span class="line">    img_url = <span class="string">f&#x27;https://www.starbucks.com.cn<span class="subst">&#123;img_url&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行下载</span></span><br><span class="line">    page.download(img_url, <span class="string">r&#x27;.\imgs&#x27;</span>, rename=name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode安装FiraCode字体</title>
      <link href="/2023/03/02/%E7%AC%94%E8%AE%B0/Vscode%E5%AE%89%E8%A3%85FiraCode%E5%AD%97%E4%BD%93/"/>
      <url>/2023/03/02/%E7%AC%94%E8%AE%B0/Vscode%E5%AE%89%E8%A3%85FiraCode%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以 windows 系统环境为例。</p><h2 id="1、安装字体"><a href="#1、安装字体" class="headerlink" title="1、安装字体"></a>1、安装字体</h2><ul><li><p>字体下载地址：<a href="https://github.com/tonsky/FiraCode">https://github.com/tonsky/FiraCode</a> </p></li><li><p>下载并解压文件夹后可以发现有个 <span style="color:#027ad5"><strong>ttf</strong></span> 文件夹。</p></li></ul><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172305311.webp" alt="image-20230220141328700"></p><ul><li>进入 ttf 文件夹，全选文件，然后右键选择安装。</li></ul><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172305716.webp" alt="image-20230220142009644"></p><h2 id="2、配置VSCode"><a href="#2、配置VSCode" class="headerlink" title="2、配置VSCode"></a>2、配置VSCode</h2><ul><li>进入设置页面，依次选择 <strong>字体</strong>、<strong>在 settinfs.json 中编辑</strong> 。</li></ul><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172305851.webp" alt="image-20230220142144058"></p><ul><li>将下面两行配置粘贴到该文件并保存即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Fira Code&quot;,</span><br><span class="line">&quot;editor.fontLigatures&quot;: &quot;&#x27;cv01&#x27;, &#x27;cv02&#x27;, &#x27;ss05&#x27;, &#x27;ss03&#x27;&quot;,</span><br></pre></td></tr></table></figure><ul><li>如下图所示：</li></ul><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172306887.webp" alt="image-20230220142355987-1677756900546-10"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式代码高效运行指南</title>
      <link href="/2022/12/17/%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%A3%E7%A0%81%E9%AB%98%E6%95%88%E8%BF%90%E8%A1%8C%E6%8C%87%E5%8D%97/"/>
      <url>/2022/12/17/%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%A3%E7%A0%81%E9%AB%98%E6%95%88%E8%BF%90%E8%A1%8C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>【注】</strong>：本文全部内容来源于：<a href="https://mp.weixin.qq.com/s/WuiTGgxSxO79858WsxIoNw">嵌入式代码高效运行指南</a>，本人只是文章的搬运工，当然，也进行了一些整理优化。</p><p>嵌入式C语言之所以经久不衰，在于它的运行效率很高，想要高效运行代码，除了编译器帮忙优化，关键还要靠自己“优化”代码。</p><p>该方案主要是考虑到在嵌入式开发中对程序执行速度的要求特别高，所以该方案主要是为了优化程序的执行速度。</p><p>注意：优化是有侧重点的，优化是一门平衡的艺术，它往往要以牺牲程序的可读性或者增加代码长度为代价。</p><h2 id="选择合适的算法和数据结构"><a href="#选择合适的算法和数据结构" class="headerlink" title="选择合适的算法和数据结构"></a>选择合适的算法和数据结构</h2><ul><li>选择一种合适的数据结构很重要，比如在一堆随机存放的数中使用了大量的插入和删除指令，那使用链表要快得多。</li><li><p>数组与指针语句具有十分密切的关系，一般来说，指针比较灵活简洁，而数组则比较直观，容易理解。对于大部分的编译器，使用指针比使用数组生成的代码更短，执行效率更高。</p></li><li><p>在许多种情况下，可以用指针运算代替数组索引，这样做常常能产生又快又短的代码。使用多维数组时差异更明显。</p></li><li>下面的代码作用是相同的，但是效率不一样。指针方法的优点是，array的地址每次装入地址p后，在每次循环中只需对p增量操作。而在数组索引方法中，每次循环中都必须根据t值求数组下标的复杂运算。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组索引</span></span><br><span class="line">For(;;)&#123;               </span><br><span class="line">    A = <span class="built_in">array</span>[t++];</span><br><span class="line">&#125;                      </span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针运算</span></span><br><span class="line">p = <span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    A = *(p++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚀-减少运算的强度"><a href="#🚀-减少运算的强度" class="headerlink" title="🚀 减少运算的强度"></a>🚀 减少运算的强度</h2><h3 id="✈️-查表-游戏程序员必修课"><a href="#✈️-查表-游戏程序员必修课" class="headerlink" title="✈️ 查表(游戏程序员必修课)"></a>✈️ 查表(游戏程序员必修课)</h3><p>一个聪明的游戏大虾，基本上不会在自己的主循环里搞什么运算工作，绝对是先计算好了，再到循环里查表。看下面的例子：</p><p>旧代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> i * factorial(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> factorial_table[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>  <span class="comment">/* etc */</span> &#125;;</span><br><span class="line"><span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> factorial_table[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果表很大，不好写，就写一个init函数，在循环外临时生成表格。</p><h3 id="✈️-求余运算"><a href="#✈️-求余运算" class="headerlink" title="✈️ 求余运算"></a>✈️ 求余运算</h3><ul><li><p>位操作只需一个指令周期即可完成，而大部分的C编译器的“%”运算均是调用子程序来完成，代码长、执行速度慢。</p></li><li><p>只要是求 2^n^ 的余数，均可使用位操作的方法来代替。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a % <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>可以改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a &amp; <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="✈️-平方运算"><a href="#✈️-平方运算" class="headerlink" title="✈️ 平方运算"></a>✈️ 平方运算</h3><ul><li>在有内置硬件乘法器的单片机中(如51系列)，乘法运算比求平方运算快得多。</li><li>既使是在没有内置硬件乘法器的单片机中，乘法运算的子程序也要比平方运算的子程序代码短，执行速度快。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">pow</span>(a, <span class="number">2.0</span>);<span class="comment">// 慢</span></span><br><span class="line">a = a * a;<span class="comment">// 快</span></span><br></pre></td></tr></table></figure><ul><li>如果是求3次方，则效率的改善更明显。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">pow</span>(a, <span class="number">3.0</span>);<span class="comment">// 慢</span></span><br><span class="line">a = a * a * a;<span class="comment">// 快</span></span><br></pre></td></tr></table></figure><h3 id="✈️-用移位实现乘除法运算"><a href="#✈️-用移位实现乘除法运算" class="headerlink" title="✈️ 用移位实现乘除法运算"></a>✈️ 用移位实现乘除法运算</h3><ul><li><p>通常如果需要乘以或除以 2^n^，都可以用移位的方法代替。</p></li><li><p>用移位的方法得到代码比调用乘除法子程序生成的代码效率高。</p></li><li>例如：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a * <span class="number">4</span>;</span><br><span class="line">b = b / <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>可以改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line">b = b &gt;&gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>实际上，只要是乘以或除以一个整数，均可以用移位的方法得到结果，如：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a * <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>可以改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (a &lt;&lt; <span class="number">3</span>) + a;<span class="comment">// a = (a * 8) + a</span></span><br></pre></td></tr></table></figure><h3 id="✈️-避免不必要的整数除法"><a href="#✈️-避免不必要的整数除法" class="headerlink" title="✈️ 避免不必要的整数除法"></a>✈️ 避免不必要的整数除法</h3><ul><li>整数除法是整数运算中最慢的，所以应该尽可能避免。</li><li><p>一种可能减少整数除法的地方是连除，这里除法可以由乘法代替。不过有可能会导致在算乘积时溢出，所以只能在一定范围的除法中使用。</p></li><li><p>例如：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, j, k, m;</span><br><span class="line">m = i / j / k;</span><br></pre></td></tr></table></figure><ul><li>可以改成：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, j, k, m;</span><br><span class="line">m = i / (j * k);</span><br></pre></td></tr></table></figure><h3 id="✈️-使用增量和减量操作符"><a href="#✈️-使用增量和减量操作符" class="headerlink" title="✈️ 使用增量和减量操作符"></a>✈️ 使用增量和减量操作符</h3><p>在使用到加一和减一操作时尽量使用增量和减量操作符，因为增量符语句比赋值语句更快，原因在于对大多数CPU来说，对内存字的增、减量操作不必明显地使用取内存和写内存的指令，比如下面这条语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>模仿大多数微机汇编语言为例，产生的代码类似于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">move A, x;把x从内存取出存入累加器A</span><br><span class="line">add A, <span class="number">1</span>;累加器A加<span class="number">1</span></span><br><span class="line">store x;把新值存回x</span><br></pre></td></tr></table></figure><p>如果使用增量操作符，生成的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr x;x加<span class="number">1</span></span><br></pre></td></tr></table></figure><p>显然，不用取指令和存指令，增、减量操作执行的速度加快，同时长度也缩短了。</p><h3 id="✈️-使用复合赋值表达式"><a href="#✈️-使用复合赋值表达式" class="headerlink" title="✈️ 使用复合赋值表达式"></a>✈️ 使用复合赋值表达式</h3><ul><li>复合赋值表达式(如 a-=1 及 a+=1 等)都能够生成高质量的程序代码。</li></ul><h3 id="✈️-提取公共的子表达式"><a href="#✈️-提取公共的子表达式" class="headerlink" title="✈️ 提取公共的子表达式"></a>✈️ 提取公共的子表达式</h3><p>在某些情况下，C++编译器不能从浮点表达式中提出公共的子表达式，因为这意味着相当于对表达式重新排序。需要特别指出的是，编译器在提取公共子表达式前不能按照代数的等价关系重新安排表达式。这时，程序员要手动地提出公共的子表达式（在VC.NET里有一项“全局优化”选项可以完成此工作，但效果就不得而知了）。</p><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, d, e, f;</span><br><span class="line">e = b * c / d;</span><br><span class="line">f = b / d * a;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, d, e, f;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> t = (b / d);</span><br><span class="line">e = c * t;</span><br><span class="line">f = a * t;</span><br></pre></td></tr></table></figure><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, e, f;</span><br><span class="line">e = a / c;</span><br><span class="line">f = b / c;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, e, f;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> t = (<span class="number">1.0f</span> / c);</span><br><span class="line">e = a * t;</span><br><span class="line">f = b * t;</span><br></pre></td></tr></table></figure><h2 id="🚀-结构体成员的布局"><a href="#🚀-结构体成员的布局" class="headerlink" title="🚀 结构体成员的布局"></a>🚀 结构体成员的布局</h2><p>很多编译器有“使结构体字，双字或四字对齐”的选项。但是，还是需要改善结构体成员的对齐，有些编译器可能分配给结构体成员空间的顺序与他们声明的不同。但是，有些编译器并不提供这些功能，或者效果不好。所以，要在付出最少代价的情况下实现最好的结构体和结构体成员对齐，建议采取下列方法：</p><h3 id="✈️-按数据类型的长度排序"><a href="#✈️-按数据类型的长度排序" class="headerlink" title="✈️ 按数据类型的长度排序"></a>✈️ 按数据类型的长度排序</h3><p>把结构体的成员按照它们的类型长度排序，声明成员时把长的类型放在短的前面。编译器要求把长型数据类型存放在偶数地址边界。在申明一个复杂的数据类型 (既有多字节数据又有单字节数据) 时，应该首先存放多字节数据，然后再存放单字节数据，这样可以避免内存的空洞。编译器自动地把结构的实例对齐在内存的偶数边界。</p><h3 id="✈️-把结构体填充成最长类型长度的整倍数"><a href="#✈️-把结构体填充成最长类型长度的整倍数" class="headerlink" title="✈️ 把结构体填充成最长类型长度的整倍数"></a>✈️ 把结构体填充成最长类型长度的整倍数</h3><p>把结构体填充成最长类型长度的整倍数。照这样，如果结构体的第一个成员对齐了，所有整个结构体自然也就对齐了。下面的例子演示了如何对结构体成员进行重新排序：</p><p>不好的代码，普通顺序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="type">long</span> k;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">&#125; baz;</span><br></pre></td></tr></table></figure><p>推荐的代码，新的顺序并手动填充了几个字节：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">long</span> k;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="type">char</span> pad[<span class="number">7</span>];</span><br><span class="line">&#125; baz;</span><br></pre></td></tr></table></figure><p>这个规则同样适用于类的成员的布局。</p><h3 id="✈️-按数据类型的长度排序本地变量"><a href="#✈️-按数据类型的长度排序本地变量" class="headerlink" title="✈️ 按数据类型的长度排序本地变量"></a>✈️ 按数据类型的长度排序本地变量</h3><p>当编译器分配给本地变量空间时，它们的顺序和它们在源代码中声明的顺序一样，和上一条规则一样，应该把长的变量放在短的变量前面。如果第一个变量对齐了，其它变量就会连续的存放，而且不用填充字节自然就会对齐。有些编译器在分配变量时不会自动改变变量顺序，有些编译器不能产生4字节对齐的栈，所以4字节可能不对齐。下面这个例子演示了本地变量声明的重新排序：</p><p>不好的代码，普通顺序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> ga, gu, gi;</span><br><span class="line"><span class="type">long</span> foo, bar;</span><br><span class="line"><span class="type">double</span> x, y, z[<span class="number">3</span>];</span><br><span class="line"><span class="type">char</span> a, b;</span><br><span class="line"><span class="type">float</span> baz;</span><br></pre></td></tr></table></figure><p>推荐的代码，改进的顺序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> z[<span class="number">3</span>];</span><br><span class="line"><span class="type">double</span> x, y;</span><br><span class="line"><span class="type">long</span> foo, bar;</span><br><span class="line"><span class="type">float</span> baz;</span><br><span class="line"><span class="type">short</span> ga, gu, gi;</span><br></pre></td></tr></table></figure><h3 id="✈️-把频繁使用的指针型参数拷贝到本地变量"><a href="#✈️-把频繁使用的指针型参数拷贝到本地变量" class="headerlink" title="✈️ 把频繁使用的指针型参数拷贝到本地变量"></a>✈️ 把频繁使用的指针型参数拷贝到本地变量</h3><p>避免在函数中频繁使用指针型参数指向的值。因为编译器不知道指针之间是否存在冲突，所以指针型参数往往不能被编译器优化。这样数据不能被存放在寄存器中，而且明显地占用了内存带宽。注意，很多编译器有“假设不冲突”优化开关（在VC里必须手动添加编译器命令行/Oa或/Ow），这允许编译器假设两个不同的指针总是有不同的内容，这样就不用把指针型参数保存到本地变量。否则，请在函数一开始把指针指向的数据保存到本地变量。如果需要的话，在函数结束前拷贝回去。</p><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 q != r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isqrt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> a, <span class="type">unsigned</span> <span class="type">long</span>* q, <span class="type">unsigned</span> <span class="type">long</span>* r)</span></span><br><span class="line">&#123;</span><br><span class="line">    *q = a;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (*q &gt; (*r = a / *q))</span><br><span class="line">        &#123;</span><br><span class="line">          *q = (*q + *r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *r = a - *q * *q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 q != r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isqrt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> a, <span class="type">unsigned</span> <span class="type">long</span>* q, <span class="type">unsigned</span> <span class="type">long</span>* r)</span></span><br><span class="line">&#123;</span><br><span class="line">　　<span class="type">unsigned</span> <span class="type">long</span> qq, rr;</span><br><span class="line">　　qq = a;</span><br><span class="line">　　<span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　<span class="keyword">while</span> (qq &gt; (rr = a / qq))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　　　qq = (qq + rr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　rr = a - qq * qq;</span><br><span class="line">　　*q = qq;</span><br><span class="line">　　*r = rr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚀-循环优化"><a href="#🚀-循环优化" class="headerlink" title="🚀 循环优化"></a>🚀 循环优化</h2><h3 id="✈️-充分分解小的循环"><a href="#✈️-充分分解小的循环" class="headerlink" title="✈️ 充分分解小的循环"></a>✈️ 充分分解小的循环</h3><p>要充分利用CPU的指令缓存，就要充分分解小的循环。特别是当循环体本身很小的时候，分解循环可以提高性能。注意:很多编译器并不能自动分解循环。不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3D转化：把矢量 V 和 4x4 矩阵 M 相乘</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">　　r[i] = <span class="number">0</span>;</span><br><span class="line">　　<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j ++)</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　r[i] += M[j][i] * V[j];</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r[<span class="number">0</span>] = M[<span class="number">0</span>][<span class="number">0</span>]*V[<span class="number">0</span>] + M[<span class="number">1</span>][<span class="number">0</span>]*V[<span class="number">1</span>] + M[<span class="number">2</span>][<span class="number">0</span>]*V[<span class="number">2</span>] + M[<span class="number">3</span>][<span class="number">0</span>]*V[<span class="number">3</span>];</span><br><span class="line">r[<span class="number">1</span>] = M[<span class="number">0</span>][<span class="number">1</span>]*V[<span class="number">0</span>] + M[<span class="number">1</span>][<span class="number">1</span>]*V[<span class="number">1</span>] + M[<span class="number">2</span>][<span class="number">1</span>]*V[<span class="number">2</span>] + M[<span class="number">3</span>][<span class="number">1</span>]*V[<span class="number">3</span>];</span><br><span class="line">r[<span class="number">2</span>] = M[<span class="number">0</span>][<span class="number">2</span>]*V[<span class="number">0</span>] + M[<span class="number">1</span>][<span class="number">2</span>]*V[<span class="number">1</span>] + M[<span class="number">2</span>][<span class="number">2</span>]*V[<span class="number">2</span>] + M[<span class="number">3</span>][<span class="number">2</span>]*V[<span class="number">3</span>];</span><br><span class="line">r[<span class="number">3</span>] = M[<span class="number">0</span>][<span class="number">3</span>]*V[<span class="number">0</span>] + M[<span class="number">1</span>][<span class="number">3</span>]*V[<span class="number">1</span>] + M[<span class="number">2</span>][<span class="number">3</span>]*V[<span class="number">2</span>] + M[<span class="number">3</span>][<span class="number">3</span>]*v[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="✈️-提取公共部分"><a href="#✈️-提取公共部分" class="headerlink" title="✈️ 提取公共部分"></a>✈️ 提取公共部分</h3><p>对于一些不需要循环变量参加运算的任务可以把它们放到循环外面，这里的任务包括表达式、函数的调用、指针运算、数组访问等，应该将没有必要执行多次的操作全部集合在一起，放到一个init的初始化程序中进行。</p><h3 id="✈️-延时函数"><a href="#✈️-延时函数" class="headerlink" title="✈️ 延时函数"></a>✈️ 延时函数</h3><p>通常使用的延时函数均采用自加的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其改为自减延时函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1000</span>; i &gt; <span class="number">0</span>; i--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数的延时效果相似，但几乎所有的C编译对后一种函数生成的代码均比前一种代码少13个字节，因为几乎所有的MCU均有为0转移的指令，采用后一种方式能够生成这类指令。在使用while循环时也一样，使用自减指令控制循环会比使用自加指令控制循环生成的代码更少1~3个字母。但是在循环中有通过循环变量“i”读写数组的指令时，使用预减循环有可能使数组超界，要引起注意。</p><h3 id="✈️-while循环和do…while循环"><a href="#✈️-while循环和do…while循环" class="headerlink" title="✈️ while循环和do…while循环"></a>✈️ while循环和do…while循环</h3><p>用while循环时有以下两种循环形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="comment">//用户程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">i = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="comment">//用户程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在这两种循环中，使用do…while循环编译后生成的代码的长度短于while循环。</p><h3 id="✈️-循环展开"><a href="#✈️-循环展开" class="headerlink" title="✈️ 循环展开"></a>✈️ 循环展开</h3><p>这是经典的速度优化，但许多编译程序(如gcc -funroll-loops)能自动完成这个事，所以现在你自己来优化这个显得效果不明显。</p><p>旧代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    do_stuff(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; )</span><br><span class="line">&#123;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">    do_stuff(i); i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，新代码里比较指令由100次降低为10次，循环时间节约了90%。不过注意:对于中间变量或结果被更改的循环，编译程序往往拒绝展开，(怕担责任呗)，这时候就需要你自己来做展开工作了。</p><p>还有一点请注意，在有内部指令cache的CPU上(如MMX芯片)，因为循环展开的代码很大，往往cache溢出，这时展开的代码会频繁地在CPU 的cache和内存之间调来调去，又因为cache速度很高，所以此时循环展开反而会变慢。还有就是循环展开会影响矢量运算优化。</p><h3 id="✈️-循环嵌套"><a href="#✈️-循环嵌套" class="headerlink" title="✈️ 循环嵌套"></a>✈️ 循环嵌套</h3><p>把相关循环放到一个循环里，也会加快速度。</p><p>旧代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)         <span class="comment">/* initialize 2d array to 0&#x27;s */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAX; j++)</span><br><span class="line">        a[i][j] = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)        <span class="comment">/* put 1&#x27;s along the diagonal */</span></span><br><span class="line">        a[i][i] = <span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><p>新代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)         <span class="comment">/* initialize 2d array to 0&#x27;s */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAX; j++)</span><br><span class="line">        a[i][j] = <span class="number">0.0</span>;</span><br><span class="line">    a[i][i] = <span class="number">1.0</span>;                            <span class="comment">/* put 1&#x27;s along the diagonal */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✈️-Switch语句中根据发生频率来进行case排序"><a href="#✈️-Switch语句中根据发生频率来进行case排序" class="headerlink" title="✈️ Switch语句中根据发生频率来进行case排序"></a>✈️ Switch语句中根据发生频率来进行case排序</h3><p>Switch 可能转化成多种不同算法的代码。其中最常见的是跳转表和比较链/树。当switch用比较链的方式转化时，编译器会产生if-else-if的嵌套代码，并按照顺序进行比较，匹配时就跳转到满足条件的语句执行。所以可以对case的值依照发生的可能性进行排序，把最有可能的放在第一位，这样可以提高性能。此外，在case中推荐使用小的连续的整数，因为在这种情况下，所有的编译器都可以把switch 转化成跳转表。</p><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> days_in_month, short_months, normal_months, long_months;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (days_in_month)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">        short_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">        normal_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">        long_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;month has fewer than 28 or more than 31 days&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> days_in_month， short_months， normal_months， long_months;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (days_in_month)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">        long_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">        normal_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">        short_months++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;month has fewer than 28 or more than 31 days&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✈️-将大的switch语句转为嵌套switch语句"><a href="#✈️-将大的switch语句转为嵌套switch语句" class="headerlink" title="✈️ 将大的switch语句转为嵌套switch语句"></a>✈️ 将大的switch语句转为嵌套switch语句</h3><p>当switch语句中的case标号很多时，为了减少比较的次数，明智的做法是把大switch语句转为嵌套switch语句。把发生频率高的case 标号放在一个switch语句中，并且是嵌套switch语句的最外层，发生相对频率相对低的case标号放在另一个switch语句中。比如，下面的程序段把相对发生频率低的情况放在缺省的case标号内。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pMsg = ReceiveMessage();</span><br><span class="line"><span class="keyword">switch</span> (pMsg-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> FREQUENT_MSG1:</span><br><span class="line">        handleFrequentMsg();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FREQUENT_MSG2:</span><br><span class="line">        handleFrequentMsg2();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FREQUENT_MSGn:</span><br><span class="line">        handleFrequentMsgn();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:                     <span class="comment">//嵌套部分用来处理不经常发生的消息</span></span><br><span class="line">        <span class="keyword">switch</span> (pMsg-&gt;type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> INFREQUENT_MSG1:</span><br><span class="line">                handleInfrequentMsg1();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INFREQUENT_MSG2:</span><br><span class="line">                handleInfrequentMsg2();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INFREQUENT_MSGm:</span><br><span class="line">                handleInfrequentMsgm();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果switch中每一种情况下都有很多的工作要做，那么把整个switch语句用一个指向函数指针的表来替换会更加有效，比如下面的switch语句，有三种情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MsgType</span>&#123;</span>Msg1, Msg2, Msg3&#125;;</span><br><span class="line"><span class="keyword">switch</span> (ReceiveMessage()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> Msg1;</span><br><span class="line">        。。。。。。</span><br><span class="line">    <span class="keyword">case</span> Msg2;</span><br><span class="line">        。。。。。</span><br><span class="line">    <span class="keyword">case</span> Msg3;</span><br><span class="line">        。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了提高执行速度，用下面这段代码来替换这个上面的switch语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*准备工作*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">handleMsg1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">handleMsg2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">handleMsg3</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/*创建一个函数指针数组*/</span></span><br><span class="line"><span class="type">int</span> (*MsgFunction [])() = &#123;handleMsg1, handleMsg2, handleMsg3&#125;;</span><br><span class="line"><span class="comment">/*用下面这行更有效的代码来替换switch语句*/</span></span><br><span class="line">status=MsgFunction[ReceiveMessage()]();</span><br></pre></td></tr></table></figure><h3 id="✈️-循环转置"><a href="#✈️-循环转置" class="headerlink" title="✈️ 循环转置"></a>✈️ 循环转置</h3><p>有些机器对JNZ(为0转移)有特别的指令处理，速度非常快，如果你的循环对方向不敏感，可以由大向小循环。</p><p>旧代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= MAX; i++)</span><br><span class="line">&#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = MAX + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (--i)</span><br><span class="line">&#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过千万注意，如果指针操作使用了i值，这种方法可能引起指针越界的严重错误(i = MAX+1;)。当然你可以通过对i做加减运算来纠正，但是这样就起不到加速的作用，除非类似于以下情况：</p><p>旧代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[MAX + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= MAX; i++)</span><br><span class="line">&#123;</span><br><span class="line">    *(a + i + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = MAX + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (--i)</span><br><span class="line">&#123;</span><br><span class="line">    *(a + i + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✈️-公用代码块"><a href="#✈️-公用代码块" class="headerlink" title="✈️ 公用代码块"></a>✈️ 公用代码块</h3><p>一些公用处理模块，为了满足各种不同的调用需要，往往在内部采用了大量的if-then-else结构，这样很不好，判断语句如果太复杂，会消耗大量的时间的，应该尽量减少公用代码块的使用。(任何情况下，空间优化和时间优化都是对立的—东楼)。当然，如果仅仅是一个(3==x)之类的简单判断，适当使用一下，也还是允许的。记住，优化永远是追求一种平衡，而不是走极端。</p><h3 id="✈️-提升循环的性能"><a href="#✈️-提升循环的性能" class="headerlink" title="✈️ 提升循环的性能"></a>✈️ 提升循环的性能</h3><p>要提升循环的性能，减少多余的常量计算非常有用（比如，不随循环变化的计算）。</p><p>不好的代码(在for()中包含不变的if())：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( i 。。。)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( CONSTANT0 )</span><br><span class="line">    &#123;</span><br><span class="line">        DoWork0(i);<span class="comment">// 假设这里不改变CONSTANT0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        DoWork1(i);<span class="comment">// 假设这里不改变CONSTANT0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( CONSTANT0 )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>( i 。。。)</span><br><span class="line">    &#123;</span><br><span class="line">        DoWork0( i );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>( i 。。。)</span><br><span class="line">    &#123;</span><br><span class="line">        DoWork1( i );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果已经知道if()的值，这样可以避免重复计算。虽然不好的代码中的分支可以简单地预测，但是由于推荐的代码在进入循环前分支已经确定，就可以减少对分支预测的依赖。</p><h3 id="✈️-选择好的无限循环"><a href="#✈️-选择好的无限循环" class="headerlink" title="✈️ 选择好的无限循环"></a>✈️ 选择好的无限循环</h3><p>在编程中，我们常常需要用到无限循环，常用的两种方法是<code>while (1)</code>和<code>for (;;)</code>。这两种方法效果完全一样，但那一种更好呢？然我们看看它们编译后的代码：</p><p>编译前：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax, <span class="number">1</span></span><br><span class="line">test eax, eax</span><br><span class="line">je foo + <span class="number">23</span>h</span><br><span class="line">jmp foo + <span class="number">18</span>h</span><br></pre></td></tr></table></figure><p>编译前：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;);</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp foo + <span class="number">23</span>h</span><br></pre></td></tr></table></figure><p>显然，<code>for (;;)</code>指令少，不占用寄存器，而且没有判断、跳转，比<code>while (1)</code>好。</p><h2 id="🚀-提高CPU的并行性"><a href="#🚀-提高CPU的并行性" class="headerlink" title="🚀 提高CPU的并行性"></a>🚀 提高CPU的并行性</h2><h3 id="✈️-使用并行代码"><a href="#✈️-使用并行代码" class="headerlink" title="✈️ 使用并行代码"></a>✈️ 使用并行代码</h3><p>尽可能把长的有依赖的代码链分解成几个可以在流水线执行单元中并行执行的没有依赖的代码链。很多高级语言，包括C++，并不对产生的浮点表达式重新排序，因为那是一个相当复杂的过程。需要注意的是，重排序的代码和原来的代码在代码上一致并不等价于计算结果一致，因为浮点操作缺乏精确度。在一些情况下，这些优化可能导致意料之外的结果。幸运的是，在大部分情况下，最后结果可能只有最不重要的位（即最低位）是错误的。</p><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> a[<span class="number">100</span>], sum;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">sum = <span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    sum += a[i];</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> a[<span class="number">100</span>], sum1, sum2, sum3, sum4, sum;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">sum1 = sum2 = sum3 = sum4 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">    sum1 += a[i];</span><br><span class="line">    sum2 += a[i+<span class="number">1</span>];</span><br><span class="line">    sum3 += a[i+<span class="number">2</span>];</span><br><span class="line">    sum4 += a[i+<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">sum = (sum4 + sum3) + (sum1 + sum2);</span><br></pre></td></tr></table></figure><p>要注意的是：使用4路分解是因为这样使用了4段流水线浮点加法，浮点加法的每一个段占用一个时钟周期，保证了最大的资源利用率。</p><h3 id="✈️-避免没有必要的读写依赖"><a href="#✈️-避免没有必要的读写依赖" class="headerlink" title="✈️ 避免没有必要的读写依赖"></a>✈️ 避免没有必要的读写依赖</h3><p>当数据保存到内存时存在读写依赖，即数据必须在正确写入后才能再次读取。虽然AMD Athlon等CPU有加速读写依赖延迟的硬件，允许在要保存的数据被写入内存前读取出来，但是，如果避免了读写依赖并把数据保存在内部寄存器中，速度会更快。在一段很长的又互相依赖的代码链中，避免读写依赖显得尤其重要。如果读写依赖发生在操作数组时，许多编译器不能自动优化代码以避免读写依赖。所以推荐程序员手动去消除读写依赖，举例来说，引进一个可以保存在寄存器中的临时变量。这样可以有很大的性能提升。下面一段代码是一个例子：</p><p>不好的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> x[VECLEN]， y[VECLEN]， z[VECLEN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> k = <span class="number">1</span>; k &lt; VECLEN; k ++)</span><br><span class="line">&#123;</span><br><span class="line">    x[k] = x[k<span class="number">-1</span>] + y[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; VECLEN; k++)</span><br><span class="line">&#123;</span><br><span class="line">    x[k] = z[k] * (y[k] - x[k - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> x[VECLEN]， y[VECLEN]， z[VECLEN];</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">t</span><span class="params">(x[<span class="number">0</span>])</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> k = <span class="number">1</span>; k &lt; VECLEN; k ++)</span><br><span class="line">&#123;</span><br><span class="line">    t = t + y[k];</span><br><span class="line">    x[k] = t;</span><br><span class="line">&#125;</span><br><span class="line">t = x[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>;k &lt; VECLEN; k ++)</span><br><span class="line">&#123;</span><br><span class="line">    t = z[k] * (y[k] - t);</span><br><span class="line">    x[k] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚀-循环不变计算"><a href="#🚀-循环不变计算" class="headerlink" title="🚀 循环不变计算"></a>🚀 循环不变计算</h2><p>对于一些不需要循环变量参加运算的计算任务可以把它们放到循环外面，现在许多编译器还是能自己干这件事，不过对于中间使用了变量的算式它们就不敢动了，所以很多情况下你还得自己干。对于那些在循环中调用的函数，凡是没必要执行多次的操作通通提出来，放到一个init函数里，循环前调用。另外尽量减少喂食次数，没必要的话尽量不给它传参，需要循环变量的话让它自己建立一个静态循环变量自己累加，速度会快一点。</p><p>还有就是结构体访问，东楼的经验，凡是在循环里对一个结构体的两个以上的元素执行了访问，就有必要建立中间变量了(结构这样，那C++的对象呢?想想看)，看下面的例子:</p><p>旧代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total = a-&gt;b-&gt;c[<span class="number">4</span>]-&gt;aardvark + a-&gt;b-&gt;c[<span class="number">4</span>]-&gt;baboon + a-&gt;b-&gt;c[<span class="number">4</span>]-&gt;cheetah + a-&gt;b-&gt;c[<span class="number">4</span>]-&gt;dog;</span><br></pre></td></tr></table></figure><p>新代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animals</span> * <span class="title">temp</span> =</span> a-&gt;b-&gt;c[<span class="number">4</span>];</span><br><span class="line">total = temp-&gt;aardvark + temp-&gt;baboon + temp-&gt;cheetah + temp-&gt;dog;</span><br></pre></td></tr></table></figure><p>一些老的C语言编译器不做聚合优化，而符合ANSI规范的新的编译器可以自动完成这个优化，看例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, d, f, g;</span><br><span class="line"></span><br><span class="line">a = b / c * d;</span><br><span class="line">f = b * g / c;</span><br></pre></td></tr></table></figure><p>这种写法当然要得，但是没有优化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a, b, c, d, f, g;</span><br><span class="line"></span><br><span class="line">a = b / c * d;</span><br><span class="line">f = b / c * g;</span><br></pre></td></tr></table></figure><p>如果这么写的话，一个符合ANSI规范的新的编译器可以只计算b/c一次，然后将结果代入第二个式子，节约了一次除法运算。</p><h2 id="🚀-函数优化"><a href="#🚀-函数优化" class="headerlink" title="🚀 函数优化"></a>🚀 函数优化</h2><h3 id="✈️-Inline函数"><a href="#✈️-Inline函数" class="headerlink" title="✈️ Inline函数"></a>✈️ Inline函数</h3><p>在C++中，关键字Inline可以被加入到任何函数的声明中。这个关键字请求编译器用函数内部的代码替换所有对于指出的函数的调用。这样做在两个方面快于函数调用：第一，省去了调用指令需要的执行时间;第二，省去了传递变元和传递过程需要的时间。但是使用这种方法在优化程序速度的同时，程序长度变大了，因此需要更多的ROM。使用这种优化在Inline函数频繁调用并且只包含几行代码的时候是最有效的。</p><h3 id="✈️-不定义不使用的返回值"><a href="#✈️-不定义不使用的返回值" class="headerlink" title="✈️ 不定义不使用的返回值"></a>✈️ 不定义不使用的返回值</h3><p>函数定义并不知道函数返回值是否被使用，假如返回值从来不会被用到，应该使用void来明确声明函数不返回任何值。</p><h3 id="✈️-减少函数调用参数"><a href="#✈️-减少函数调用参数" class="headerlink" title="✈️ 减少函数调用参数"></a>✈️ 减少函数调用参数</h3><p>使用全局变量比函数传递参数更加有效率。这样做去除了函数调用参数入栈和函数完成后参数出栈所需要的时间。然而决定使用全局变量会影响程序的模块化和重入，故要慎重使用。</p><h3 id="✈️-所有函数都应该有原型定义"><a href="#✈️-所有函数都应该有原型定义" class="headerlink" title="✈️ 所有函数都应该有原型定义"></a>✈️ 所有函数都应该有原型定义</h3><p>一般来说，所有函数都应该有原型定义。原型定义可以传达给编译器更多的可能用于优化的信息。</p><h3 id="✈️-尽可能使用常量-const"><a href="#✈️-尽可能使用常量-const" class="headerlink" title="✈️ 尽可能使用常量(const)"></a>✈️ 尽可能使用常量(const)</h3><p>尽可能使用常量(const)。C++ 标准规定，如果一个const声明的对象的地址不被获取，允许编译器不对它分配储存空间。这样可以使代码更有效率，而且可以生成更好的代码。</p><h3 id="✈️-把本地函数声明为静态的-static"><a href="#✈️-把本地函数声明为静态的-static" class="headerlink" title="✈️ 把本地函数声明为静态的(static)"></a>✈️ 把本地函数声明为静态的(static)</h3><p>如果一个函数只在实现它的文件中被使用，把它声明为静态的(static)以强制使用内部连接。否则，默认的情况下会把函数定义为外部连接。这样可能会影响某些编译器的优化——比如，自动内联。</p><h2 id="🚀-采用递归"><a href="#🚀-采用递归" class="headerlink" title="🚀 采用递归"></a>🚀 采用递归</h2><p>与LISP之类的语言不同，C语言一开始就病态地喜欢用重复代码循环，许多C程序员都是除非算法要求，坚决不用递归。事实上，C编译器们对优化递归调用一点都不反感，相反，它们还很喜欢干这件事。只有在递归函数需要传递大量参数，可能造成瓶颈的时候，才应该使用循环代码，其他时候，还是用递归好些。</p><h2 id="🚀-变量"><a href="#🚀-变量" class="headerlink" title="🚀 变量"></a>🚀 变量</h2><h3 id="✈️-register变量"><a href="#✈️-register变量" class="headerlink" title="✈️ register变量"></a>✈️ register变量</h3><p>在声明局部变量的时候可以使用register关键字。这就使得编译器把变量放入一个多用途的寄存器中，而不是在堆栈中，合理使用这种方法可以提高执行速度。函数调用越是频繁，越是可能提高代码的速度。</p><p>在最内层循环避免使用全局变量和静态变量，除非你能确定它在循环周期中不会动态变化，大多数编译器优化变量都只有一个办法，就是将他们置成寄存器变量，而对于动态变量，它们干脆放弃对整个表达式的优化。尽量避免把一个变量地址传递给另一个函数，虽然这个还很常用。C语言的编译器们总是先假定每一个函数的变量都是内部变量，这是由它的机制决定的，在这种情况下，它们的优化完成得最好。但是，一旦一个变量有可能被别的函数改变，这帮兄弟就再也不敢把变量放到寄存器里了，严重影响速度。看例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b();</span><br><span class="line">c(&amp;d);</span><br></pre></td></tr></table></figure><p>因为d的地址被c函数使用，有可能被改变，编译器不敢把它长时间的放在寄存器里，一旦运行到c(&amp;d)，编译器就把它放回内存，如果在循环里，会造成N次频繁的在内存和寄存器之间读写d的动作，众所周知，CPU在系统总线上的读写速度慢得很。比如你的赛杨300，CPU主频300，总线速度最多66M，为了一个总线读，CPU可能要等4-5个周期，得。。得。。得。。想起来都打颤。</p><h3 id="✈️-同时声明多个变量优于单独声明变量"><a href="#✈️-同时声明多个变量优于单独声明变量" class="headerlink" title="✈️ 同时声明多个变量优于单独声明变量"></a>✈️ 同时声明多个变量优于单独声明变量</h3><h3 id="✈️-短变量名优于长变量名，应尽量使变量名短一点"><a href="#✈️-短变量名优于长变量名，应尽量使变量名短一点" class="headerlink" title="✈️ 短变量名优于长变量名，应尽量使变量名短一点"></a>✈️ 短变量名优于长变量名，应尽量使变量名短一点</h3><h3 id="✈️-在循环开始前声明变量"><a href="#✈️-在循环开始前声明变量" class="headerlink" title="✈️ 在循环开始前声明变量"></a>✈️ 在循环开始前声明变量</h3><h2 id="🚀-使用嵌套的if结构"><a href="#🚀-使用嵌套的if结构" class="headerlink" title="🚀 使用嵌套的if结构"></a>🚀 使用嵌套的if结构</h2><p>在if结构中如果要判断的并列条件较多，最好将它们拆分成多个if结构，然后嵌套在一起，这样可以避免无谓的判断。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客美化</title>
      <link href="/2022/11/02/hexo/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/11/02/hexo/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚲 🚗 ✈️ 🚀</p><h2 id="🚀-添加动漫人物"><a href="#🚀-添加动漫人物" class="headerlink" title="🚀 添加动漫人物"></a>🚀 添加动漫人物</h2><p>安装 hexo-helper-live2d 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>安装下载动画人物库，例如下面几个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-shizuku <span class="comment">#课桌女孩</span></span><br><span class="line">npm install --save live2d-widget-model-hijiki  <span class="comment">#黑猫</span></span><br><span class="line">npm install --save live2d-widget-model-tororo  <span class="comment">#白猫</span></span><br></pre></td></tr></table></figure><p>博客根目录<code>_config.yml</code>文件配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 添加动画live2d模块  npm install --save hexo-helper-live2d</span></span><br><span class="line"><span class="comment">## 下载动画人物库 npm install live2d-widget-model-z16 -D</span></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span> <span class="comment"># 默认</span></span><br><span class="line">  pluginRootPath: live2dw/ <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  pluginJsPath: lib/ <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  pluginModelPath: assets/ <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  tagMode: <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  debug: <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-miku</span><br><span class="line">  display:</span><br><span class="line">    position: right <span class="comment">#动画位置</span></span><br><span class="line">    width: 150</span><br><span class="line">    height: 190</span><br><span class="line">    <span class="comment"># 位置配置，这个在左侧边栏位置很居中</span></span><br><span class="line">    hOffset: 50  <span class="comment"># 调节水平位置</span></span><br><span class="line">    vOffset: -5  <span class="comment"># 调节垂直位置</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">false</span> <span class="comment"># 是否在移动设备上显示</span></span><br><span class="line">    scale: 0.5 <span class="comment"># 移动设备上的缩放</span></span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><ul><li><a href="https://blog.csdn.net/u013044713/article/details/120251025?spm=1001.2014.3001.5506#t8">hexo博客搭建及主题优化(二)</a></li><li><a href="https://blog.csdn.net/qq_36239569/article/details/104104894">Hexo添加Live2D看板娘最新教程</a></li><li><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">Hexo添加Live2D看板娘+模型预览</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RaspberryPi-PICO在Linux系统下的C开发环境搭建</title>
      <link href="/2022/10/30/%E5%8D%95%E7%89%87%E6%9C%BA/RaspberryPi-PICO%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/10/30/%E5%8D%95%E7%89%87%E6%9C%BA/RaspberryPi-PICO%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>🚀 ✈️ 🚗 🚲</p><p>本机系统为 Ubuntu 2022.04</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linkk@linkk-Ubuntu22:/$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux linkk-Ubuntu22 5.15.0-52-generic <span class="comment">#58-Ubuntu SMP Thu Oct 13 08:03:55 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h2 id="🚀-安装CMake"><a href="#🚀-安装CMake" class="headerlink" title="🚀 安装CMake"></a>🚀 安装CMake</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br><span class="line">cmake --version              <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure><p>==如果版本低于3.12.0则需要更新cmake（通过cmake源码编译升级）==</p><h2 id="🚀-下载代码仓库"><a href="#🚀-下载代码仓库" class="headerlink" title="🚀 下载代码仓库"></a>🚀 下载代码仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/workspace/raspberry_pi_pico</span><br><span class="line"><span class="built_in">cd</span> ~/workspace/raspberry_pi_pico</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/raspberrypi/pico-sdk.git</span><br><span class="line"><span class="built_in">cd</span> pico-sdk/</span><br><span class="line">git submodule update --init</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/raspberrypi/pico-examples.git</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/raspberrypi/pico-extras.git</span><br></pre></td></tr></table></figure><p>==注意git submodule update —init一定要执行，因为pico-sdk里面要用到tinyUSB，否则sdk里面的USB功能就都无法使用==</p><p>这时候该路径下一共有四个文件夹。其中最重要的两个仓库，一个是 pico-sdk ，一个是 pico-examples 。其他仓库都是一些高级应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linkk@linkk-Ubuntu22:~/workspace/raspberry_pi_pico$ <span class="built_in">ls</span></span><br><span class="line">pico-examples  pico-extras  pico-playground  pico-sdk</span><br></pre></td></tr></table></figure><h2 id="🚀-安装交叉编译工具链"><a href="#🚀-安装交叉编译工具链" class="headerlink" title="🚀 安装交叉编译工具链"></a>🚀 安装交叉编译工具链</h2><h3 id="✈️-下载交叉编译工具链"><a href="#✈️-下载交叉编译工具链" class="headerlink" title="✈️ 下载交叉编译工具链"></a>✈️ 下载交叉编译工具链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/workspace/raspberry_pi_pico</span><br><span class="line"><span class="built_in">mkdir</span> toolchain</span><br><span class="line"><span class="built_in">cd</span> toolchain</span><br><span class="line">wget https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2</span><br><span class="line">tar vxf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2</span><br><span class="line"><span class="built_in">rm</span> gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2</span><br><span class="line"><span class="built_in">mv</span> gcc-arm-none-eabi-10.3-2021.10/ gcc-arm-none-eabi</span><br></pre></td></tr></table></figure><p>其他系统的交叉编译器可以在这进行查找下载：<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads</a></p><p>可以进入 bin 文件夹查看一下交叉编译器的版本，确保工具链可以正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/workspace/raspberry_pi_pico/toolchain/gcc-arm-none-eabi/bin</span><br><span class="line">./arm-none-eabi-gcc -v</span><br></pre></td></tr></table></figure><h3 id="✈️-设置环境变量"><a href="#✈️-设置环境变量" class="headerlink" title="✈️ 设置环境变量"></a>✈️ 设置环境变量</h3><p>打开 ~/.bashrc ，在文件最后面添加下面两行语句（需根据交叉编译器的存放路径进行修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PICO_SDK_PATH=<span class="string">&quot;~/workspace/raspberry_pi_pico/pico-sdk&quot;</span></span><br><span class="line"><span class="built_in">export</span> PICO_TOOLCHAIN_PATH=<span class="string">&quot;~/workspace/raspberry_pi_pico/toolchain/gcc-arm-none-eabi&quot;</span></span><br></pre></td></tr></table></figure><p> 设置完成后==重新打开==一个终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> | grep PICO</span><br></pre></td></tr></table></figure><p>如果能看到如下内容说明设置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PICO_SDK_PATH=~/workspace/raspberry_pi_pico/pico-sdk</span><br><span class="line">PICO_TOOLCHAIN_PATH=~/workspace/raspberry_pi_pico/toolchain/gcc-arm-none-eabi</span><br></pre></td></tr></table></figure><h3 id="✈️-安装g"><a href="#✈️-安装g" class="headerlink" title="✈️ 安装g++"></a>✈️ 安装g++</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br><span class="line">g++ --version</span><br></pre></td></tr></table></figure><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><p><a href="https://blog.csdn.net/tianizimark/article/details/122713031">Raspberry-Pi-PICO系列—第三篇 开发环境搭建-Ubuntu系统</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RaspberryPi-PICO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2022/10/30/%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/30/%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-Git-简介"><a href="#🚀-Git-简介" class="headerlink" title="🚀 Git 简介"></a>🚀 Git 简介</h2><p>​        <strong>Git</strong> 是 <strong>Linus Torvalds</strong> 为了帮助管理 Linux 内核源码而开发的一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 它拥有两套版本库，本地库和远程库，在不进行合并和删除之类的操作时这两套版本库互不影响。也因此其近乎所有的操作都是本地执行，所以在断网的情况下仍然可以提交代码，切换分支。Git 又使用了 SHA-1 哈希算法确保了在文件传输时变得不完整、磁盘损坏导致数据丢失时能立即察觉到。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172255353.png" alt="image-20221010154859671"></p><ul><li><p>workspace：工作区</p></li><li><p>staging area：暂存区/缓存区</p></li><li><p>blocal repository：本地仓库</p></li><li><p>remote repository：远程仓库</p></li></ul><h3 id="✈️-Git-的优点"><a href="#✈️-Git-的优点" class="headerlink" title="✈️ Git 的优点"></a>✈️ Git 的优点</h3><p>1、适合分布式开发，强调个体。</p><p>2、公共服务器压力和数据量都不会太大。</p><p>3、速度快、灵活。</p><p>4、任意两个开发者之间可以很容易的解决冲突。</p><p>5、离线工作。</p><h3 id="✈️-Git-的缺点"><a href="#✈️-Git-的缺点" class="headerlink" title="✈️ Git 的缺点"></a>✈️ Git 的缺点</h3><p>1、模式上比 SVN 更加复杂。</p><p>2、不符合常规思维。</p><p>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</p><h3 id="✈️-小知识：Git-名字的由来"><a href="#✈️-小知识：Git-名字的由来" class="headerlink" title="✈️ 小知识：Git 名字的由来"></a>✈️ 小知识：Git 名字的由来</h3><p>git 在英语俚语意思是蠢货，自以为是且好辩的人。以下是作者本人的话：</p><blockquote><p>I’m an egotistical bastard, and I name all my projects after myself. First ‘Linux’, now ‘Git’.<br>我是个任性的杂种，我把所有我做的项目以我自己命名。先是’Linux’，这次是’Git’.</p></blockquote><p>除此以外，还有一个解释。</p><p>2005年4月7日，Linus Torvalds 对 Git 的代码进行首次提交时，添加了一个名为 README 的文件。这个文件的第一段是这样写的：</p><blockquote><p>GIT - the stupid content tracker</p><p>“git” can mean anything, depending on your mood.</p><ul><li><p>random three-letter combination that is pronounceable, and not actually used by any common UNIX command.  The fact that it is a mispronunciation of “get” may or may not be relevant.</p></li><li><p>stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.</p></li><li><p>“global information tracker”: you’re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.</p></li><li><p>“goddamn idiotic truckload of sh*t”: when it breaks</p></li></ul><p>This is a stupid (but extremely fast) directory content manager.  It  doesn’t do a whole lot, but what it <em>does</em> do is track directory contents efficiently.</p></blockquote><p>从上面这段话中我们可以看出，Linus 对 Git 的含义做出了多种解释：</p><ol><li>第一个原因可以看做是实用性的原因。一个三个字母的命令说起来快，打起来也容易。</li><li>“Git “这个词没有被任何其他现有的Unix命令所使用。</li><li>Git最初的工作版本的代码非常简单，功能很弱。</li><li>表示Global Information Tracker的缩写，如果能正常工作时。</li><li>表示Goddamn Idiotic Truckload of sh*t的首字母缩写，如果不能正常工作时。</li></ol><h2 id="🚀-Git-基本环境搭建"><a href="#🚀-Git-基本环境搭建" class="headerlink" title="🚀 Git 基本环境搭建"></a>🚀 Git 基本环境搭建</h2><h3 id="✈️-初始化仓库"><a href="#✈️-初始化仓库" class="headerlink" title="✈️ 初始化仓库"></a>✈️ 初始化仓库</h3><p>在想要创建本地仓库的目录下单击鼠标右键，选择 <strong>Git Bash Here</strong> ，在 git 终端 输入命令 <code>git init</code> 创建一个本地仓库。</p><p>此时会自动生成一个 master 分支，并在该目录下建立 .git 目录。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172255522.png" alt="image-20221010163039891"></p><p>每个项目有且只有一个 .git 目录，为项目存储所有元数据和对象数据库，这些对象指向不同的分支。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。其内容释义如下：</p><blockquote><ul><li>HEAD                        # 这个项目当前指向哪个分支</li><li>config                        # 项目的配置信息， git config 命令会改动它</li><li>description               # 用来显示对仓库的描述信息</li><li>hooks/                       # 包含客户端或服务端的钩子脚本，在特定操作下自动执行</li><li>index                         # 暂存区文件，是一个二进制文件</li><li>logs/                          # 保存日志信息</li><li>objects/                    # 存储所有数据内容,本地的版本库存放位置</li><li>info                           # 信息文件夹. 包含一个全局性排除文件，可以配置文件忽略</li><li>refs/                          # 存储指向数据的提交对象的分支</li></ul></blockquote><p>==&gt;  切记：不要手动去修改或删除 .git 文件夹中的内容。==</p><h3 id="✈️-生成-SSH-Key"><a href="#✈️-生成-SSH-Key" class="headerlink" title="✈️ 生成 SSH Key"></a>✈️ 生成 SSH Key</h3><p>输入以下命令，即可创建 SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen<span class="comment"># 本地仓库生成 SSH Key</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub<span class="comment"># 查看 SSH Key</span></span><br></pre></td></tr></table></figure><p>将生成的 Key 复制，绑定到 Gitlab （<a href="http://gitlab.shcm.longsys.com">http://gitlab.shcm.longsys.com</a> ）上，即可在本地和远程仓库之间进行操作了。如下图所示：</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172256735.png" alt="图片1"></p><h3 id="✈️-配置用户信息"><a href="#✈️-配置用户信息" class="headerlink" title="✈️ 配置用户信息"></a>✈️ 配置用户信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&lt;USER&gt;&quot;</span><span class="comment"># 设置用户名，将&lt;USER&gt;替换成自己的用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&lt;Email&gt;&quot;</span><span class="comment"># 设置邮箱，将&lt;Email&gt;替换成自己的邮箱</span></span><br><span class="line">git config --list                           <span class="comment"># 查看配置信息</span></span><br></pre></td></tr></table></figure><h2 id="🚀-Git-常用命令"><a href="#🚀-Git-常用命令" class="headerlink" title="🚀 Git 常用命令"></a>🚀 Git 常用命令</h2><h3 id="✈️-常用的命令"><a href="#✈️-常用的命令" class="headerlink" title="✈️ 常用的命令"></a>✈️ 常用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init<span class="comment"># 初始化并创建一个仓库</span></span><br><span class="line">git add.<span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span> <span class="comment"># 提交暂存区中的内容到本地仓库</span></span><br><span class="line">git <span class="built_in">log</span><span class="comment"># 查看提交的版本</span></span><br><span class="line">git status<span class="comment"># 查看所有文件的状态</span></span><br><span class="line">git status [filename]<span class="comment"># 查看指定文件的状态</span></span><br></pre></td></tr></table></figure><h3 id="✈️-分支与合并相关命令"><a href="#✈️-分支与合并相关命令" class="headerlink" title="✈️ 分支与合并相关命令"></a>✈️ 分支与合并相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch                          <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch [branch-name]            <span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git checkout -b [branch]            <span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout [branch-name]          <span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git branch -d [branch-name]         <span class="comment"># 删除本地分支</span></span><br><span class="line">git merge [branch]                  <span class="comment"># 合并指定分支到当前分支</span></span><br></pre></td></tr></table></figure><h3 id="✈️-网络常用命令"><a href="#✈️-网络常用命令" class="headerlink" title="✈️ 网络常用命令"></a>✈️ 网络常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库地址&gt;<span class="comment"># 克隆一个远程仓库到本地</span></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<span class="comment"># 把当前分支放到网上，如网络分支不存在则网络端自动创建一个分支!</span></span><br><span class="line">git push &lt;远程主机名&gt; -d &lt;分支名&gt;           <span class="comment"># 删除远程分支</span></span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<span class="comment"># 从远程获取最新版本的代码并合并到本地的版本</span></span><br></pre></td></tr></table></figure><p>其中远程主机名默认为 origin ，也可以通过 <code>git remote</code> 命令查询，当远程分支名和本地分支名相同时，可省略冒号以及后面的分支名。</p><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><ul><li><a href="https://baike.baidu.com/item/GIT/12647237">GIT（分布式版本控制系统）百度百科</a></li><li><a href="https://www.bilibili.com/read/cv14701783?spm_id_from=444.41.0.0">快速掌握Git分布式系统操作 - 哔哩哔哩 (bilibili.com)</a></li><li><a href="https://blog.csdn.net/u011535541/article/details/83379151?ops_request_misc={&quot;request_id&quot;%3A&quot;164128859016780271932295&quot;%2C&quot;scm&quot;%3A&quot;20140713.130102334..&quot;}&amp;request_id=164128859016780271932295&amp;biz_id=0&amp;spm=1018.2226.3001.4187">Git使用教程 阿踏踏踏踏的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/guoqx/article/details/123180923">Git 名字的由来_夜流冰的博客-CSDN博客</a></li><li><a href="https://www.zhihu.com/question/425355002">git这个名字有什么由来吗？- 知乎</a></li><li><a href="https://www.cnblogs.com/FuYingju/p/14342973.html">Git - FuYingju - 博客园</a></li><li><a href="https://blog.csdn.net/dxnn520/article/details/125632416">Git目录中各个文件（文件夹）的说明_敦厚的曹操的博客-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客Shoka主题环境搭建</title>
      <link href="/2022/10/27/hexo/hexo%E5%8D%9A%E5%AE%A2Shoka%E4%B8%BB%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/10/27/hexo/hexo%E5%8D%9A%E5%AE%A2Shoka%E4%B8%BB%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="clone主题文件"><a href="#clone主题文件" class="headerlink" title="clone主题文件"></a>clone主题文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd your-blog</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure><h2 id="下载所需的插件"><a href="#下载所需的插件" class="headerlink" title="下载所需的插件"></a>下载所需的插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save          <span class="comment"># 卸载掉默认的 hexo-renderer-marked </span></span><br><span class="line">cnpm install hexo-renderer-multi-markdown-it --save <span class="comment"># 安装 hexo-renderer-marked </span></span><br><span class="line">cnpm install hexo-autoprefixer --save</span><br><span class="line">cnpm install hexo-algoliasearch --save</span><br><span class="line">cnpm install hexo-symbols-count-time --save</span><br><span class="line">cnpm install hexo-feed --save-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装npm</title>
      <link href="/2022/10/27/Linux/Linux%E5%AE%89%E8%A3%85npm/"/>
      <url>/2022/10/27/Linux/Linux%E5%AE%89%E8%A3%85npm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载npm"><a href="#下载npm" class="headerlink" title="下载npm"></a>下载npm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://registry.npmmirror.com/-/binary/node/v19.0.0/node-v19.0.0-linux-x64.tar.xz</span><br><span class="line">tar -vxf node-v19.0.0-linux-x64.tar.xz</span><br><span class="line">rm node-v19.0.0-linux-x64.tar.xz</span><br><span class="line">sudo mv node-v19.0.0-linux-x64 /usr/local/node</span><br></pre></td></tr></table></figure><h2 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br><span class="line">sudo ln -s /usr/local/node/bin/node /usr/bin/node</span><br></pre></td></tr></table></figure><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">sudo ln -s /usr/local/node/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云部署hexo博客</title>
      <link href="/2022/05/12/hexo/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/05/12/hexo/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文基于已经搭建好的 hexo 博客，不再讲解 hexo 博客的搭建。</p><h2 id="🚀-参考资料"><a href="#🚀-参考资料" class="headerlink" title="🚀 参考资料"></a>🚀 参考资料</h2><p>腾讯云官方部署教程：<a href="https://cloud.tencent.com/document/product/1154/40217">https://cloud.tencent.com/document/product/1154/40217</a></p><p>B站视频教程：<a href="https://www.bilibili.com/video/BV1tY411c7Y6?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1tY411c7Y6?spm_id_from=333.880.my_history.page.click</a></p><h2 id="🚀-部署步骤"><a href="#🚀-部署步骤" class="headerlink" title="🚀 部署步骤"></a>🚀 部署步骤</h2><h3 id="✈-安装-Serverless-Framework"><a href="#✈-安装-Serverless-Framework" class="headerlink" title="✈ 安装 Serverless Framework"></a>✈ 安装 Serverless Framework</h3><p>使用 npm 安装前，需要确保您的环境中已安装好了 Node（<strong>版本需要 &gt; 12</strong>）以及 npm（查看 <a href="https://nodejs.org/zh-cn/download/">Node.js 安装指南</a>）。</p><p>可使用 <code>node -v</code> 和 <code>npm -v</code> 查看它们的版本。</p><p>为保证安装速度和稳定性，可以使用 cnpm 代替 npm 完成安装。</p><p>安装 cnpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm -registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完毕后，可通过运行<code>cnpm -v</code>命令，查看 cnpm 的版本信息。</p><p>Serverless 安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g serverless-cloud-framework</span><br></pre></td></tr></table></figure><p>如果之前已经安装过 Serverless Framework，可以通过以下命令升级到最新版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm update -g serverless-cloud-framework</span><br></pre></td></tr></table></figure><p>安装完毕后，可通过运行<code>scf -v</code>命令，查看 Serverless Framework 的版本信息。</p><h3 id="✈-Serverless配置"><a href="#✈-Serverless配置" class="headerlink" title="✈ Serverless配置"></a>✈ Serverless配置</h3><p>在 hexo 目录下，创建<code>serverless.yml</code>文件。</p><p>写入以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"></span><br><span class="line">component: website <span class="comment"># (必填) 引用 component 的名称，当前用到的是 tencent-website 组件</span></span><br><span class="line">name: hexodemo <span class="comment"># (必填) 该 website 组件创建的实例名称</span></span><br><span class="line"></span><br><span class="line">app: Linkk<span class="string">&#x27;s Blog # (可选) 该 website 应用名称</span></span><br><span class="line"><span class="string">stage: dev # (可选) 用于区分环境信息，默认值是 dev</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">inputs:</span></span><br><span class="line"><span class="string">  src:</span></span><br><span class="line"><span class="string">    src: ./public # Upload static files generated by HEXO</span></span><br><span class="line"><span class="string">    index: index.html</span></span><br><span class="line"><span class="string">    # dist: ./dist</span></span><br><span class="line"><span class="string">    # hook: npm run build</span></span><br><span class="line"><span class="string">    # websitePath: ./</span></span><br><span class="line"><span class="string">  region: ap-singapore# 新加坡不需要证书</span></span><br><span class="line"><span class="string">  bucketName: linkk-bucket# 全部要小写</span></span><br><span class="line"><span class="string">  protocol: https</span></span><br></pre></td></tr></table></figure><h3 id="✈-开始部署"><a href="#✈-开始部署" class="headerlink" title="✈ 开始部署"></a>✈ 开始部署</h3><p>部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scf deploy --debug</span><br></pre></td></tr></table></figure><p>如果希望更新 Hexo 站点中的文章，需要在本地重新运行<code>hexo g</code>进行生成静态页面，再运行<code>sls deploy</code>更新到页面。</p><h3 id="✈-移除部署"><a href="#✈-移除部署" class="headerlink" title="✈ 移除部署"></a>✈ 移除部署</h3><p>移除部署的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scf remove --debug</span><br></pre></td></tr></table></figure><h3 id="✈-账号配置"><a href="#✈-账号配置" class="headerlink" title="✈ 账号配置"></a>✈ 账号配置</h3><p>当前默认支持 CLI 扫描二维码登录，如过希望配置持久的环境变量/密钥信息，也可以本地创建 <code>.env</code> 文件。</p><p>然后在 .env 文件中填入腾讯云的 ID 和 KEY。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .env</span></span><br><span class="line">TENCENT_SECRET_ID=123</span><br><span class="line">TENCENT_SECRET_KEY=123</span><br></pre></td></tr></table></figure><p>如果已有腾讯云账号，可以在 <a href="https://console.cloud.tencent.com/cam/capi">API 密钥管理</a> 中获取 SecretId 和 SecretKey。</p><p>也可以在扫码登陆之后，使用以下命令生成全局用户配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scf credentials</span><br></pre></td></tr></table></figure><h2 id="🚀-域名解析"><a href="#🚀-域名解析" class="headerlink" title="🚀 域名解析"></a>🚀 域名解析</h2><h3 id="✈-对象存储设置"><a href="#✈-对象存储设置" class="headerlink" title="✈ 对象存储设置"></a>✈ 对象存储设置</h3><p>进入腾讯云控制台，对象存储，然后找到并进入存储桶列表。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172251711.png" alt="image-20220513141911670"></p><p>选择需要自定义域名的存储桶进入，添加域名和证书，一般生效时间在1小时左右。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172251995.png" alt="image-20220513141451488"></p><h3 id="✈-DNS解析"><a href="#✈-DNS解析" class="headerlink" title="✈ DNS解析"></a>✈ DNS解析</h3><p>进入腾讯云控制台，搜索DNS解析，然后进行下图的配置。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172252052.png" alt="image-20220513141451488"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Platform设备驱动</title>
      <link href="/2022/05/12/Linux/Platform%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/05/12/Linux/Platform%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-Platform设备驱动简介"><a href="#🚀-Platform设备驱动简介" class="headerlink" title="🚀 Platform设备驱动简介"></a>🚀 Platform设备驱动简介</h2><p>很多设备虽然用途不同，但其接口定义都是一样的 ，因此很多时候我们不需要去为每个设备都写一个驱动 。</p><p>因此 Linux 2.6  及以后的内核中虚拟出来的一条总线 ，即 platform 总线。</p><p>平台总线模型将设备代码和驱动代码分离， 将和硬件设备相关的都放到 device.c 文件里面，驱动部分代码都放到 driver.c 文件里面。 </p><p> 这样做的好处是， 实现了此类设备和驱动的分离， 增强设备驱动的可移植性。</p><h2 id="🚀-Platform-设备"><a href="#🚀-Platform-设备" class="headerlink" title="🚀 Platform 设备"></a>🚀 Platform 设备</h2><h3 id="✈-platform-device-结构体"><a href="#✈-platform-device-结构体" class="headerlink" title="✈ platform_device 结构体"></a>✈ platform_device 结构体</h3><p>在 platform 平台下用 platform_device 这个结构体表示 platform 设备。</p><p>如果内核支持设备树的话就不用使用 platform_device 来描述设备了， 因为改用设备树去描述了 platform_device。 </p><p>具体定义在内核源码 <code>/include/linux/platform_device.h</code> 里面， 结构体内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;<span class="comment">// platform 设备的名字， 用来和 platform 驱动相匹配。 名字相同才能匹配成功。</span></span><br><span class="line">    <span class="type">int</span> id;<span class="comment">// 用来区分名字相同的设备，一般为-1</span></span><br><span class="line">    <span class="type">bool</span> id_auto;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">dev</span>;</span><span class="comment">// 内置的 device 结构体</span></span><br><span class="line">    u32 num_resources;<span class="comment">// 资源结构体数量，可用 ARRAY_SIZE 函数来获取</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> *<span class="title">resource</span>;</span><span class="comment">// 指向一个资源结构体数组。 一般包含设备信息。 </span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device_id</span> *<span class="title">id_entry</span>;</span><span class="comment">// 用来进行与设备驱动匹配用的 id_table 表</span></span><br><span class="line">    <span class="type">char</span> *driver_override; <span class="comment">/* Driver name to force a match */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* MFD cell pointer */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mfd_cell</span> *<span class="title">mfd_cell</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* arch specific additions */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pdev_archdata</span> <span class="title">archdata</span>;</span><span class="comment">// 添加自己的私有数据。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="✈-resource-结构体"><a href="#✈-resource-结构体" class="headerlink" title="✈ resource 结构体"></a>✈ resource 结构体</h3><p>resource 结构体内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">resource</span> &#123;</span></span><br><span class="line">    <span class="type">resource_size_t</span> start;<span class="comment">// 资源的起始信息</span></span><br><span class="line">    <span class="type">resource_size_t</span> end;<span class="comment">// 资源的终止信息</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;<span class="comment">// 资源名字 </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;<span class="comment">// 资源类型</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> *<span class="title">parent</span>, *<span class="title">sibling</span>, *<span class="title">child</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可选的资源类型都定义在了文件 <code>include/linux/ioport.h</code> 里面， 如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_BITS 0x000000ff <span class="comment">/* Bus-specific bits */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_TYPE_BITS 0x00001f00 <span class="comment">/* Resource type */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_IO 0x00000100 <span class="comment">/* PCI/ISA I/O ports */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_MEM 0x00000200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_REG 0x00000300 <span class="comment">/* Register offsets */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_IRQ 0x00000400</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_DMA 0x00000800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_BUS 0x00001000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* PCI control bits. Shares IORESOURCE_BITS with above PCI ROM. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IORESOURCE_PCI_FIXED (1&lt;&lt;4) <span class="comment">/* Do not move resource */</span></span></span><br></pre></td></tr></table></figure><h3 id="✈-platform-device-程序框架"><a href="#✈-platform-device-程序框架" class="headerlink" title="✈ platform_device 程序框架"></a>✈ platform_device 程序框架</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span>             <span class="comment">// 初始化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span>           <span class="comment">// 最基本的文件， 支持动态添加和卸载模块。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span>  <span class="comment">// 平台设备所需要的头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">* @功能: 释放 flatform 设备模块的时候此函数会执行</span></span><br><span class="line"><span class="comment">* @参数 dev: 要释放的设备</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">device_release</span><span class="params">(<span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;device_release \n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备资源信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">resource</span> <span class="title">device_res</span>[] =</span> &#123;</span><br><span class="line">    [<span class="number">0</span>] = &#123;</span><br><span class="line">        .start  = <span class="number">0x020AC000</span>,    </span><br><span class="line">        .end    = <span class="number">0x020AC003</span>,</span><br><span class="line">        .flags  = IORESOURCE_MEM,</span><br><span class="line">        .name   = <span class="string">&quot;GPIO5_DR&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// platform 设备结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">platform_device</span> =</span> &#123;</span><br><span class="line">    .name = <span class="string">&quot;platform_test&quot;</span>,</span><br><span class="line">    .id = <span class="number">-1</span>,</span><br><span class="line">    .resource = device_res,</span><br><span class="line">    .num_resources = ARRAY_SIZE(device_res),</span><br><span class="line">    .dev = &#123;</span><br><span class="line">        .release = device_release</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">device_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设备信息注册到 Linux 内核</span></span><br><span class="line">    platform_device_register(&amp;platform_device);</span><br><span class="line">    printk(<span class="string">&quot;platform_device_register ok \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">device_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设备信息卸载</span></span><br><span class="line">    platform_device_unregister(&amp;platform_device);</span><br><span class="line">    printk(<span class="string">&quot;gooodbye! \n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module_init(device_init);</span><br><span class="line">module_exit(device_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="🚀-Platform-驱动"><a href="#🚀-Platform-驱动" class="headerlink" title="🚀 Platform 驱动"></a>🚀 Platform 驱动</h2><h3 id="✈-platform-driver-结构体"><a href="#✈-platform-driver-结构体" class="headerlink" title="✈ platform_driver 结构体"></a>✈ platform_driver 结构体</h3><p>在 Linux 内核中， 用 platform_driver 结构体表示 platform 驱动 。</p><p>此结构体定义在文件 <code>include/linux/platform_device.h</code> 中， 内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*probe)(<span class="keyword">struct</span> platform_device *);<span class="comment">// 当 driver 和 device 匹配成功的时候， 就会执行 probe 函数</span></span><br><span class="line">    <span class="type">int</span> (*remove)(<span class="keyword">struct</span> platform_device *);<span class="comment">// 当 driver 和 device 任意一个 remove 的时候， 就会执行这个函数</span></span><br><span class="line">    <span class="type">void</span> (*shutdown)(<span class="keyword">struct</span> platform_device *);<span class="comment">// 当设备收到 shutdown 命令的时候， 就会执行这个函数</span></span><br><span class="line">    <span class="type">int</span> (*suspend)(<span class="keyword">struct</span> platform_device *, <span class="type">pm_message_t</span> state); <span class="comment">//当设备收到 suspend 命令的时候， 就会执行这个函数</span></span><br><span class="line">    <span class="type">int</span> (*resume)(<span class="keyword">struct</span> platform_device *);<span class="comment">// 当设备收到 resume 命令的时候， 就会执行这个函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device_driver</span> <span class="title">driver</span>;</span><span class="comment">// 内置的 device_driver 结构体</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device_id</span> *<span class="title">id_table</span>;</span><span class="comment">// 该设备驱动支持的设备的列表 他是通过这个指针去指向 platform_device_id 类型的数组</span></span><br><span class="line">    <span class="type">bool</span> prevent_deferred_probe;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="✈-device-driver-结构体"><a href="#✈-device-driver-结构体" class="headerlink" title="✈ device_driver 结构体"></a>✈ device_driver 结构体</h3><p>device_driver 结构体定义在 <code>include/linux/device.h</code>， device_driver 结构体内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_driver</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bus_type</span> *<span class="title">bus</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *mod_name; <span class="comment">/* used for built-in modules */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> suppress_bind_attrs; <span class="comment">/* disables bind/unbind via sysfs */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> *<span class="title">of_match_table</span>;</span><span class="comment">// 采用设备树的时候驱动使用的匹配表</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">acpi_device_id</span> *<span class="title">acpi_match_table</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*probe) (<span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*remove) (<span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">void</span> (*shutdown) (<span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*suspend) (<span class="keyword">struct</span> device *dev, <span class="type">pm_message_t</span> state);</span><br><span class="line">    <span class="type">int</span> (*resume) (<span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">attribute_group</span> **<span class="title">groups</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dev_pm_ops</span> *<span class="title">pm</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">driver_private</span> *<span class="title">p</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="✈-platform-driver-程序框架"><a href="#✈-platform-driver-程序框架" class="headerlink" title="✈ platform_driver 程序框架"></a>✈ platform_driver 程序框架</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span> <span class="comment">//初始化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span> <span class="comment">//最基本的文件， 支持动态添加和卸载模块。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span> <span class="comment">//平台设备所需要的头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 驱动和设备匹配成功会进入此函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">driver_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> *<span class="title">res</span>;</span></span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;driver_probe\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取资源方法一： 不推荐*/</span></span><br><span class="line">    printk(<span class="string">&quot;beep_res is %s\n&quot;</span>, pdev-&gt;resource[<span class="number">0</span>].name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取资源方法二： 推荐*/</span></span><br><span class="line">    res = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;platform_get_resource is error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EBUSY;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印获取的寄存器地址和长度</span></span><br><span class="line">    printk(<span class="string">&quot;beep_res start is 0x%x \n&quot;</span>, res-&gt;start);</span><br><span class="line">    printk(<span class="string">&quot;beep_res end is 0x%x \n&quot;</span>, res-&gt;end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 driver 和 device 任意一个 remove 的时候， 就会执行这个函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">driver_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;driver_remove\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// platform 驱动结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">platform_driver</span> =</span> &#123;</span><br><span class="line">    .probe = driver_probe,</span><br><span class="line">    .remove = driver_remove,</span><br><span class="line">    .driver = &#123;</span><br><span class="line">        .owner = THIS_MODULE,</span><br><span class="line">        .name = <span class="string">&quot;platform_test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">platform_driver_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// platform 驱动注册到 Linux 内核</span></span><br><span class="line">    ret = platform_driver_register(&amp;platform_driver); <span class="comment">//注册平台驱动函数</span></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;platform_driver_register error \n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    printk(<span class="string">&quot;platform_driver_register ok \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">platform_driver_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// platform 驱动卸载</span></span><br><span class="line">    platform_driver_unregister(&amp;platform_driver);</span><br><span class="line">    printk(<span class="string">&quot;gooodbye! \n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">module_init(platform_driver_init);</span><br><span class="line">module_exit(platform_driver_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux杂项设备驱动</title>
      <link href="/2022/04/07/Linux/Linux%E6%9D%82%E9%A1%B9%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/04/07/Linux/Linux%E6%9D%82%E9%A1%B9%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-杂项设备驱动简介"><a href="#🚀-杂项设备驱动简介" class="headerlink" title="🚀 杂项设备驱动简介"></a>🚀 杂项设备驱动简介</h2><p>杂项设备是字符设备的一种，它比常规字符设备驱动更加简单。</p><p>杂项设备驱动可以自动生成设备节点，而且所有杂项设备的主设备号均为 10，可以有效节约内核资源。</p><p>可以用  <code>cat  /proc/misc</code>   来查看系统当前的杂项设备。</p><h2 id="🚀-miscdevice-结构体"><a href="#🚀-miscdevice-结构体" class="headerlink" title="🚀 miscdevice 结构体"></a>🚀 miscdevice 结构体</h2><p>misc 设备用 miscdevice 结构体表示， miscdevice 结构体的定义在内核源码具体定义在 <code>include/linux/miscdevice.h</code> 中， 内容如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般只需要给 minor、name、fops 这三个成员变量赋值即可</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> &#123;</span></span><br><span class="line"><span class="type">int</span> minor; <span class="comment">//次设备号</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *name; <span class="comment">//设备节点的名字</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">fops</span>;</span> <span class="comment">//文件操作集</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">this_device</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">attribute_group</span> **<span class="title">groups</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *nodename;</span><br><span class="line"><span class="type">umode_t</span> mode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="🚀-杂项设备驱动程序框架"><a href="#🚀-杂项设备驱动程序框架" class="headerlink" title="🚀 杂项设备驱动程序框架"></a>🚀 杂项设备驱动程序框架</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span>         <span class="comment">// 包含初始化宏定义的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span>       <span class="comment">// 包含初始化加载模块的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span>   <span class="comment">// 杂项设备驱动相关的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span>           <span class="comment">// 包含文件操作集定义的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">misc_fops</span> =</span> &#123;</span><br><span class="line">    .owner= THIS_MODULE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">misc_dev</span> =</span> &#123;</span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR,    <span class="comment">// 动态分配次设备号</span></span><br><span class="line">    .name = <span class="string">&quot;hello_misc&quot;</span>,           <span class="comment">// 设备节点的名字</span></span><br><span class="line">    .fops = &amp;misc_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块的入口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">misc_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = misc_register(&amp;misc_dev);  <span class="comment">// 注册杂项设备</span></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;misc register is error!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;misc register is succeed!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块的出口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">misc_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    misc_deregister(&amp;misc_dev);</span><br><span class="line">    printk(<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明模块的入口和出口 */</span></span><br><span class="line">module_init(misc_init);</span><br><span class="line">module_exit(misc_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);  <span class="comment">/* 声明模块的开源许可证 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux字符驱动</title>
      <link href="/2022/04/05/Linux/linux%E5%AD%97%E7%AC%A6%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/04/05/Linux/linux%E5%AD%97%E7%AC%A6%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀-设备号"><a href="#🚀-设备号" class="headerlink" title="🚀 设备号"></a>🚀 设备号</h2><h3 id="✈-设备号简述"><a href="#✈-设备号简述" class="headerlink" title="✈ 设备号简述"></a>✈ 设备号简述</h3><p>设备号由主设备号和 次设备号构成。主设备号用来表示一个特定的驱动程序。 次设备号用来表示使用该驱动程序的各个设备。 Linux 提供了一个名为dev_t 的数据类型表示设备号， dev_t 定义在文件 include/linux/types.h 里面， 定义如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __u32 <span class="type">__kernel_dev_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">__kernel_dev_t</span> <span class="type">dev_t</span></span><br></pre></td></tr></table></figure><p>由 dev_t 类型的定义可知，设备号是一个32位的变量， 其中 前12 位用来表示主设备号（0-4095 ）， 后20 位用来表示次设备号。   </p><p>Linux 提供了几个宏定义来操作设备号：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MINORBITS20 <span class="comment">//次设备号的位数， 一共是 20 位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINORMASK ((1U &lt;&lt; MINORBITS) - 1) <span class="comment">//次设备号的掩码</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAJOR(dev) ((unsigned int) ((dev) &gt;&gt; MINORBITS)) <span class="comment">//在 dev_t 里面获取我们的主设备号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINOR(dev) ((unsigned int) ((dev) &amp; MINORMASK)) <span class="comment">//在 dev_t 里面获取我们的次设备号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MKDEV(ma,mi) (((ma) &lt;&lt; MINORBITS) | (mi)) <span class="comment">//将我们的主设备号和次设备号组成一个 dev_t 类型。</span></span></span><br></pre></td></tr></table></figure><h3 id="✈-设备号的分配"><a href="#✈-设备号的分配" class="headerlink" title="✈ 设备号的分配"></a>✈ 设备号的分配</h3><p>分配设备号有两种方案，静态分配和动态分配。由于静态分配设备号可能存在冲突问题， 因此建议使用动态分配设备号。   </p><p>函数定义：<code>int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name);</code></p><p>各参数的含义：</p><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>dev</td><td>保存申请到的设备号。</td></tr><tr><td>baseminor</td><td>次设备号的起始地址，一般取0，即次设备号从 0 开始。</td></tr><tr><td>count</td><td>要申请的设备号数量。</td></tr><tr><td>name</td><td>设备名字。</td></tr></tbody></table></div><p>返回值：成功返回 0， 失败返回负数。 </p><p>动态分配会优先分配 255 到 234 的主设备号。</p><h3 id="✈-设备号的注销"><a href="#✈-设备号的注销" class="headerlink" title="✈ 设备号的注销"></a>✈ 设备号的注销</h3><p>设备号释放函数 ：<code>void unregister_chrdev_region(dev_t from, unsigned count);</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>from</td><td>要释放的设备号。</td></tr><tr><td>count</td><td>表示从 from 开始， 要释放的设备号数量。</td></tr></tbody></table></div><h2 id="🚀-字符类设备的注册和注销"><a href="#🚀-字符类设备的注册和注销" class="headerlink" title="🚀 字符类设备的注册和注销"></a>🚀 字符类设备的注册和注销</h2><h3 id="✈-初始化cdev-结构体"><a href="#✈-初始化cdev-结构体" class="headerlink" title="✈  初始化cdev 结构体"></a>✈  初始化cdev 结构体</h3><p>在 Linux 内核中， 使用 cdev 结构体描述一个字符设备， cdev 结构体的定义如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//描述字符设备的一个结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> &#123;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">ops</span>;</span><span class="comment">// 文件操作集</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line">    <span class="type">dev_t</span> dev;<span class="comment">// 设备号</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count;<span class="comment">// 设备数量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数 cdev_init 用于初始化 cdev 结构体，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cdev: 要初始化的 cdev 结构体变量。</span></span><br><span class="line"><span class="comment">// ops: 实际就是把此文件操作集写给 cdev</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *cdev, <span class="type">const</span> <span class="keyword">struct</span> file_operations *ops)</span>;</span><br></pre></td></tr></table></figure><p>cdev_init 函数只给 cdev 结构体的 ops 成员变量赋了值，一般还需给 owner 赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdev.owner = THIS_MODULE;</span><br></pre></td></tr></table></figure><h3 id="✈-字符类设备的注册和注销"><a href="#✈-字符类设备的注册和注销" class="headerlink" title="✈ 字符类设备的注册和注销"></a>✈ 字符类设备的注册和注销</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能: 注册字符类设备</span></span><br><span class="line"><span class="comment">// cdev: 要注册的 cdev</span></span><br><span class="line"><span class="comment">// dev: 设备号</span></span><br><span class="line"><span class="comment">// count: 次设备号的数量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cdev_add</span><span class="params">(<span class="keyword">struct</span> cdev *cdev, <span class="type">dev_t</span> dev, <span class="type">unsigned</span> count)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能: 注销字符类设备</span></span><br><span class="line"><span class="comment">// cdev: 要注销的 cdev</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdev_del</span><span class="params">(<span class="keyword">struct</span> cdev *cdev)</span>;</span><br></pre></td></tr></table></figure><h2 id="🚀-创建和卸载设备"><a href="#🚀-创建和卸载设备" class="headerlink" title="🚀 创建和卸载设备"></a>🚀 创建和卸载设备</h2><h3 id="✈-类的创建和删除"><a href="#✈-类的创建和删除" class="headerlink" title="✈ 类的创建和删除"></a>✈ 类的创建和删除</h3><p>内核中  struct class 结构体类型变量对应一个类，  使用宏定义  <code>class_create</code> 创建一个类  ，然后再调用函数 <code>device_create</code> 来在 /dev 目录下创建相应的设备节点。  </p><p>class_create 的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> class_create(owner, name) \</span></span><br><span class="line"><span class="meta">    (&#123; \</span></span><br><span class="line"><span class="meta">    static struct lock_class_key __key; \</span></span><br><span class="line"><span class="meta">    __class_create(owner, name, &amp;__key); \</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *__<span class="title">class_create</span>(<span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>, <span class="keyword">struct</span> <span class="title">lock_class_key</span> *<span class="title">key</span>);</span></span><br></pre></td></tr></table></figure><p>class_create 一共有两个参数， 参数 owner 一般为 THIS_MODULE， 参数 name 是类名字。 返回值是个指向结构体 class 的指针， 也就是创建的类。  </p><p>卸载驱动程序的时候需要删除掉类， 类删除函数为 class_destroy， 函数原型如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">class_destroy</span><span class="params">(<span class="keyword">struct</span> class *cls)</span>;<span class="comment">// cls 为要删除的类</span></span><br></pre></td></tr></table></figure><h3 id="✈-创建和卸载设备"><a href="#✈-创建和卸载设备" class="headerlink" title="✈ 创建和卸载设备"></a>✈ 创建和卸载设备</h3><p>创建完成一个类后， 使用 device_create 函数在这个类下创建一个设备。 device_create<br>函数原型如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">class: 就是设备要创建哪个类下面。</span></span><br><span class="line"><span class="comment">parent: 父设备，一般为 NULL，即没有父设备。</span></span><br><span class="line"><span class="comment">devt: 设备号。</span></span><br><span class="line"><span class="comment">drvdata:设备可能会使用的一些数据，一般为 NULL。</span></span><br><span class="line"><span class="comment">fmt: 设备名字，如果设置 fmt=xxx 的话， 就会生成/dev/xxx 这个设备文件。 </span></span><br><span class="line"><span class="comment">返回值:</span></span><br><span class="line"><span class="comment">创建好的设备。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> device *<span class="title function_">device_create</span><span class="params">(<span class="keyword">struct</span> class *class,<span class="keyword">struct</span> device *parent,<span class="type">dev_t</span> devt,<span class="type">void</span> *drvdata,<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span>;  </span><br></pre></td></tr></table></figure><p>设备删除函数为 device_destroy， 函数原型如下：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">device_destroy</span><span class="params">(<span class="keyword">struct</span> class *class, <span class="type">dev_t</span> devt)</span>;<span class="comment">// 参数 devt 是要删除的设备号。</span></span><br></pre></td></tr></table></figure><h2 id="🚀-字符设备驱动程序框架"><a href="#🚀-字符设备驱动程序框架" class="headerlink" title="🚀 字符设备驱动程序框架"></a>🚀 字符设备驱动程序框架</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span>         <span class="comment">// 包含初始化宏定义</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span>       <span class="comment">// 包含初始化加载模块</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span>           <span class="comment">// 包含文件操作集定义</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kdev_t.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span>         <span class="comment">// 包含对字符设备结构cdv以及操作函数的定义</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span>       <span class="comment">// 包含device、class等结构的定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NUMBER       1               <span class="comment">// 次设备的数量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME         <span class="string">&quot;chrdev&quot;</span>        <span class="comment">// 设备名称</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_CLASS_NAME   <span class="string">&quot;chrdev_class&quot;</span>  <span class="comment">// 类的名称</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NODE_NAME    <span class="string">&quot;chrdev_node&quot;</span>   <span class="comment">// 设备节点名称</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">dev_t</span> dev_num;      <span class="comment">// 设备号</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span>     <span class="title">cdev</span>;</span>   </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span>   *<span class="title">device</span>;</span>   <span class="comment">// 设备</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="keyword">class</span>    *<span class="keyword">class</span>;</span>     <span class="comment">// 类</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cdev_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;cdev open!!!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cdev_close</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;cdev close!!!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备操作函数结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">cdev_fops</span> =</span> &#123;</span><br><span class="line">    .owner= THIS_MODULE,</span><br><span class="line">    .open= cdev_open,</span><br><span class="line">    .release = cdev_close,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块的入口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">chrdev_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = alloc_chrdev_region(&amp;dev_num, <span class="number">0</span>, <span class="number">1</span>, DEVICE_NAME);  <span class="comment">// 动态分配设备号</span></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;alloc_chrdev_region error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;alloc_chrdev_region succeed!\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;dev_num = %d\n&quot;</span>, dev_num);      <span class="comment">// 打印设备号</span></span><br><span class="line">    printk(<span class="string">&quot;major_num = %d, minor_num = %d\n&quot;</span>, MAJOR(dev_num), MINOR(dev_num));      <span class="comment">// 打印主设备号和次设备号</span></span><br><span class="line">    </span><br><span class="line">    cdev.owner = THIS_MODULE;</span><br><span class="line">    cdev_init(&amp;cdev, &amp;cdev_fops);</span><br><span class="line">    cdev_add(&amp;cdev, dev_num, DEVICE_NUMBER);    <span class="comment">// 注册设备</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> =</span> class_create(THIS_MODULE, DEVICE_CLASS_NAME);   <span class="comment">// 创建class类</span></span><br><span class="line">    device = device_create(class, <span class="literal">NULL</span>, dev_num, <span class="literal">NULL</span>, DEVICE_NODE_NAME);   <span class="comment">// 在class类下创建设备</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块的出口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">chrdev_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    unregister_chrdev_region(dev_num, DEVICE_NUMBER);   <span class="comment">// 注销设备号</span></span><br><span class="line">    cdev_del(&amp;cdev);                <span class="comment">// 删除设备</span></span><br><span class="line">    device_destroy(class, dev_num); <span class="comment">// 注销设备</span></span><br><span class="line">    class_destroy(class);           <span class="comment">// 删除类</span></span><br><span class="line">    printk(<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明模块的入口和出口 */</span></span><br><span class="line">module_init(chrdev_init);</span><br><span class="line">module_exit(chrdev_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);  <span class="comment">/* 声明模块的开源许可证 */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开发环境搭建</title>
      <link href="/2022/03/20/Linux/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/03/20/Linux/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🚀Ubuntu16固定IP地址"><a href="#🚀Ubuntu16固定IP地址" class="headerlink" title="🚀Ubuntu16固定IP地址"></a>🚀Ubuntu16固定IP地址</h2><p>打开网络设置，安装下图进行相应的设置即可。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172301450.webp" alt="202204042137579"></p><p>ifconfig 命令查询一下当前IP</p><p>然后 ping 一下 baidu.com，如果可以 ping 通则说明设置成功。</p><p><img src="https://cokode-1304070044.cos.ap-guangzhou.myqcloud.com/blog-img/202405172300008.webp" alt="202204042137551"></p><h2 id="🚀-SSH-服务开启"><a href="#🚀-SSH-服务开启" class="headerlink" title="🚀 SSH 服务开启"></a>🚀 SSH 服务开启</h2><p>开启 Ubuntu 的 SSH 服务以后我们就可以在 Windwos 下使用终端软件登陆到 Ubuntu，比如 使用 MobaXterm。</p><p>Ubuntu 下使用如下命令开启 SSH 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server </span><br></pre></td></tr></table></figure><p>上述命令安装 ssh 服务，ssh 的配置文件为/etc/ssh/sshd_config，使用默认配置即可。</p><hr><h2 id="🚀-FTP-服务开启"><a href="#🚀-FTP-服务开启" class="headerlink" title="🚀 FTP 服务开启"></a>🚀 FTP 服务开启</h2><p>Windows 和 Ubuntu 下的文件互传我 们需要使用 FTP 服务.</p><p>设置方法如下： </p><p>1、 执行如下命令来安装 FTP 服务： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd </span><br></pre></td></tr></table></figure><p>2、使用 VI 命令打开/etc/vsftpd.conf，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/vsftpd.conf </span><br></pre></td></tr></table></figure><p>打开以后 vsftpd.conf 文件以后找到如下两行： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES </span><br><span class="line">write_enable=YES </span><br></pre></td></tr></table></figure><p>确保上面两行前面没有“#”，有的话就取消掉。</p><p>3、重启 FTP 服务： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/vsftpd restart </span><br></pre></td></tr></table></figure><hr><h2 id="🚀-安装交叉编译链"><a href="#🚀-安装交叉编译链" class="headerlink" title="🚀 安装交叉编译链"></a>🚀 安装交叉编译链</h2><p>首先在 <a href="https://releases.linaro.org/components/toolchain/binaries/">https://releases.linaro.org/components/toolchain/binaries/</a> 获取自己需要的交叉编译器版本。</p><p>此处为获取7.2.1版本，您可获取其他版本或者通过链接直接下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/arm-linux-gnueabi/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz</span><br><span class="line">tar -vxf gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz</span><br><span class="line">mv gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi arm-linux-gcc</span><br><span class="line">sudo cp -r ./arm-linux-gcc /opt/</span><br><span class="line">sudo vim /etc/bash.bashrc</span><br></pre></td></tr></table></figure><p>在文件末尾 添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;$PATH:/opt/arm-linux-gcc/bin&quot;</span><br></pre></td></tr></table></figure><p>添加完毕，使路径生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bash.bashrc</span><br></pre></td></tr></table></figure><p>此时可用  <code>arm-linux-gnueabi-gcc -v</code>  进行测试；</p><p>若普通用户状态下没有成功，通过 <code>sudo su</code> 切换到root用户再尝试；</p><p>由于交叉编译器拼写起来太长，为了方便后续开发，可在 ~/.bashrc 中添加个人命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias mymake=&#x27;make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-&#x27;</span><br><span class="line">alias mygcc=&#x27;arm-linux-gnueabi-gcc&#x27;</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-安装必要的动态链接库"><a href="#🚀-安装必要的动态链接库" class="headerlink" title="🚀 安装必要的动态链接库"></a>🚀 安装必要的动态链接库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lib32ncurses5 lib32z1 git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev libc6-dev lib32ncurses5-dev gcc-multilib x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev g++-multilib tofrodos python-markdown libxml2-utils libssl-dev swig python-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim简易配置</title>
      <link href="/2022/03/19/Linux/vim%E7%AE%80%E6%98%93%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/19/Linux/vim%E7%AE%80%E6%98%93%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vim简易配置原则：简易实用方便，不装额外插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">syntax on           &quot;语法高亮&quot;</span><br><span class="line">set number          &quot;显示行号&quot;</span><br><span class="line">set cursorline      &quot;突出显示当前行&quot;</span><br><span class="line">set showmatch       &quot;括号匹配&quot;</span><br><span class="line">set showmode        &quot;在底部显示当前模式&quot;</span><br><span class="line">set showcmd         &quot;命令模式下显示键入的指令&quot;</span><br><span class="line">set t_Co=256        &quot;启用256色&quot;</span><br><span class="line">set textwidth=80    &quot;设置行宽&quot;</span><br><span class="line">set wrap            &quot;超过设定行宽时自动换行&quot;</span><br><span class="line">&quot;set nowrap&quot;        &quot;取消自动换行&quot;</span><br><span class="line">set scrolloff=5     &quot;垂直滚动时，光标距离顶部/底部的位置&quot;</span><br><span class="line">set laststatus=2    &quot;显示状态栏&quot;</span><br><span class="line">set ruler           &quot;在状态栏显示光标的当前位置&quot;</span><br><span class="line">set wildmenu        &quot;输入命令时，Tab键自动补全&quot;</span><br><span class="line"></span><br><span class="line">set hlsearch        &quot;搜索时，高亮显示匹配结果&quot;</span><br><span class="line">set incsearch       &quot;搜索时，高亮同步&quot;</span><br><span class="line">set ignorecase      &quot;搜索时忽略大小写&quot;</span><br><span class="line">set smartcase       &quot;搜索时智能忽略大小写&quot;</span><br><span class="line"> </span><br><span class="line">set tabstop=4       &quot;Tab长度为4空格&quot;</span><br><span class="line">set autoindent      &quot;继承前一行的缩进方式&quot;</span><br><span class="line">&quot;set expandtab       &quot;Tab自动转换为空格&quot;</span><br><span class="line">&quot;set softtabstop=4   &quot;自动转换的空格数&quot;</span><br><span class="line">set shiftwidth=4    &quot;在文本上按下 &gt;&gt;、&lt;&lt; 或者 == 时，操作的字符数&quot;</span><br><span class="line"></span><br><span class="line">&quot;设置自动补全&quot;</span><br><span class="line">inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">inoremap [ []&lt;ESC&gt;i</span><br><span class="line">inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class="line">&quot;inoremap &lt; &lt;&gt;&lt;ESC&gt;i</span><br><span class="line">inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span><br><span class="line">inoremap &quot; &quot;&quot;&lt;ESC&gt;i</span><br><span class="line"></span><br><span class="line">set mouse=a         &quot;支持使用鼠标&quot;</span><br><span class="line">set encoding=utf-8  &quot;使用 utf-8 编码&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用命令总结</title>
      <link href="/2022/01/06/Linux/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/06/Linux/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>i</code></td><td>在光标处进入插入模式</td></tr><tr><td><code>I</code></td><td>在行首进入插入模式</td></tr><tr><td><code>a</code></td><td>在光标后进入插入模式</td></tr><tr><td><code>A</code></td><td>在行尾进入插入模式</td></tr><tr><td><code>o</code></td><td>在下一行插入新行并进入插入模式</td></tr><tr><td><code>O</code></td><td>在上一行插入新行并进入插入模式</td></tr><tr><td><code>gi</code></td><td>进入到上一次插入模式的位置</td></tr><tr><td><code>&lt;esc&gt;</code></td><td>退出插入模式</td></tr></tbody></table></div><h2 id="缓存操作"><a href="#缓存操作" class="headerlink" title="缓存操作"></a>缓存操作</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>:e &lt;filename&gt;</code></td><td>新建buffer打开文件</td></tr><tr><td><code>:bp</code></td><td>切换到上一个buffer</td></tr><tr><td><code>:bn</code></td><td>切换到下一个buffer</td></tr><tr><td><code>:bd</code></td><td>删除当前buffer</td></tr></tbody></table></div><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>:sp &lt;filename&gt;</code></td><td>横向切分窗口并打开文件</td></tr><tr><td><code>:vsp &lt;filename&gt;</code></td><td>竖向切分窗口并打开文件</td></tr><tr><td><code>&lt;c-w&gt;h</code></td><td>跳到左边的窗口</td></tr><tr><td><code>&lt;c-w&gt;j</code></td><td>跳到下边的窗口</td></tr><tr><td><code>&lt;c-w&gt;k</code></td><td>跳到上边的窗口</td></tr><tr><td><code>&lt;c-w&gt;l</code></td><td>跳到右边的窗口</td></tr><tr><td><code>&lt;c-w&gt;c</code></td><td>关闭当前窗口</td></tr><tr><td><code>&lt;c-w&gt;o</code></td><td>关闭其他窗口</td></tr><tr><td><code>:only</code></td><td>关闭其他窗口</td></tr></tbody></table></div><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>h</code></td><td>上下左右移动</td></tr><tr><td><code>j</code></td><td>上下左右移动</td></tr><tr><td><code>k</code></td><td>上下左右移动</td></tr><tr><td><code>l</code></td><td>上下左右移动</td></tr><tr><td><code>0</code></td><td>光标移动到行首</td></tr><tr><td><code>^</code></td><td>跳到从行首开始第一个非空白字符</td></tr><tr><td><code>$</code></td><td>光标移动到行尾</td></tr><tr><td><code>&lt;c-o&gt;</code></td><td>跳到上一个位置</td></tr><tr><td><code>&lt;c-i&gt;</code></td><td>跳到下一个位置</td></tr><tr><td><code>&lt;c-b&gt;</code></td><td>上一页</td></tr><tr><td><code>&lt;c-f&gt;</code></td><td>下一页</td></tr><tr><td><code>&lt;c-u&gt;</code></td><td>上移半屏</td></tr><tr><td><code>&lt;c-d&gt;</code></td><td>下移半屏</td></tr><tr><td><code>H</code></td><td>调到屏幕顶上</td></tr><tr><td><code>M</code></td><td>调到屏幕中间</td></tr><tr><td><code>L</code></td><td>调到屏幕下方</td></tr><tr><td><code>:n</code></td><td>跳到第n行</td></tr><tr><td><code>w</code></td><td>跳到下一个单词开头(标点或空格分隔的单词)</td></tr><tr><td><code>W</code></td><td>跳到下一个单词开头(空格分隔的单词)</td></tr><tr><td><code>e</code></td><td>跳到下一个单词尾部(标点或空格分隔的单词)</td></tr><tr><td><code>E</code></td><td>跳到下一个单词尾部(空格分隔的单词)</td></tr><tr><td><code>b</code></td><td>上一个单词头(标点或空格分隔的单词)</td></tr><tr><td><code>B</code></td><td>上一个单词头(空格分隔的单词)</td></tr><tr><td><code>ge</code></td><td>上一个单词尾</td></tr><tr><td><code>%</code></td><td>在配对符间移动, 可用于()、{}、[]</td></tr><tr><td><code>gg</code></td><td>到文件首</td></tr><tr><td><code>G</code></td><td>到文件尾</td></tr><tr><td><code>fx</code></td><td>跳转到下一个为x的字符</td></tr><tr><td><code>Fx</code></td><td>跳转到上一个为x的字符</td></tr><tr><td><code>tx</code></td><td>跳转到下一个为x的字符前</td></tr><tr><td><code>Tx</code></td><td>跳转到上一个为x的字符前</td></tr><tr><td><code>;</code></td><td>跳到下一个搜索的结果</td></tr><tr><td><code>[[</code></td><td>跳转到函数开头</td></tr><tr><td><code>]]</code></td><td>跳转到函数结尾</td></tr></tbody></table></div><h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>r</code></td><td>替换当前字符</td></tr><tr><td><code>R</code></td><td>进入替换模式，直至 ESC 离开</td></tr><tr><td><code>s</code></td><td>替换字符（删除光标处字符，并进入插入模式，前可接数量）</td></tr><tr><td><code>S</code></td><td>替换行（删除当前行，并进入插入模式，前可接数量）</td></tr><tr><td><code>cc</code></td><td>改写当前行（删除当前行并进入插入模式），同 S</td></tr><tr><td><code>cw</code></td><td>改写光标开始处的当前单词</td></tr><tr><td><code>ciw</code></td><td>改写光标所处的单词</td></tr><tr><td><code>caw</code></td><td>改写光标所处的单词，并且包括前后空格（如果有的话）</td></tr><tr><td><code>ct,</code></td><td>改写到逗号</td></tr><tr><td><code>c0</code></td><td>改写到行首</td></tr><tr><td><code>c^</code></td><td>改写到行首（第一个非零字符）</td></tr><tr><td><code>c$</code></td><td>改写到行末</td></tr><tr><td><code>C</code></td><td>改写到行末（同 c$）</td></tr><tr><td><code>ci&quot;</code></td><td>改写双引号中的内容</td></tr><tr><td><code>ci&#39;</code></td><td>改写单引号中的内容</td></tr><tr><td><code>ci)</code></td><td>改写小括号中的内容</td></tr><tr><td><code>ci]</code></td><td>改写中括号中内容</td></tr><tr><td><code>ci&#125;</code></td><td>改写大括号中内容</td></tr><tr><td><code>cit</code></td><td>改写 xml tag 中的内容</td></tr><tr><td><code>cis</code></td><td>改写当前句子</td></tr><tr><td><code>ciB</code></td><td>改写’{}’中的内容</td></tr><tr><td><code>c2w</code></td><td>改写下两个单词</td></tr><tr><td><code>ct(</code></td><td>改写到小括号前</td></tr><tr><td><code>x</code></td><td>删除当前字符，前面可以接数字，3x代表删除三个字符</td></tr><tr><td><code>X</code></td><td>向前删除字符</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>d0</code></td><td>删除到行首</td></tr><tr><td><code>d^</code></td><td>删除到行首（第一个非零字符）</td></tr><tr><td><code>d$</code></td><td>删除到行末</td></tr><tr><td><code>D</code></td><td>删除到行末（同 d$）</td></tr><tr><td><code>dw</code></td><td>删除当前单词</td></tr><tr><td><code>dt,</code></td><td>删除到逗号</td></tr><tr><td><code>diw</code></td><td>删除光标所处的单词</td></tr><tr><td><code>daw</code></td><td>删除光标所处的单词，并包含前后空格（如果有的话）</td></tr><tr><td><code>di&quot;</code></td><td>删除双引号中的内容</td></tr><tr><td><code>di&#39;</code></td><td>删除单引号中的内容</td></tr><tr><td><code>di)</code></td><td>删除小括号中的内容</td></tr><tr><td><code>di]</code></td><td>删除中括号中内容</td></tr><tr><td><code>di&#125;</code></td><td>删除大括号中内容</td></tr><tr><td><code>diB</code></td><td>删除’{}’中的内容</td></tr><tr><td><code>dit</code></td><td>删除 xml tag 中的内容</td></tr><tr><td><code>dis</code></td><td>删除当前句子</td></tr><tr><td><code>d2w</code></td><td>删除下两个单词</td></tr><tr><td><code>dt(</code></td><td>删除到小括号前</td></tr><tr><td><code>dgg</code></td><td>删除到文件头部</td></tr><tr><td><code>dG</code></td><td>删除到文件尾部</td></tr><tr><td><code>d&#125;</code></td><td>删除下一段</td></tr><tr><td><code>d&#123;</code></td><td>删除上一段</td></tr><tr><td><code>u</code></td><td>撤销</td></tr><tr><td><code>U</code></td><td>撤销整行操作</td></tr><tr><td><code>CTRL-R</code></td><td>撤销上一次 u 命令</td></tr><tr><td><code>J</code></td><td>连接若干行</td></tr><tr><td><code>gJ</code></td><td>连接若干行，删除空白字符</td></tr><tr><td><code>.</code></td><td>重复上一次操作</td></tr><tr><td><code>~</code></td><td>交换大小写</td></tr><tr><td><code>g~iw</code></td><td>替换当前单词的大小写</td></tr><tr><td><code>gUiw</code></td><td>将单词转成大写</td></tr><tr><td><code>guiw</code></td><td>将当前单词转成小写</td></tr><tr><td><code>guu</code></td><td>全行转为小写</td></tr><tr><td><code>gUU</code></td><td>全行转为大写</td></tr><tr><td><code>gg=G</code></td><td>缩进整个文件</td></tr><tr><td><code>=a&#123;</code></td><td>缩进光标所在代码块</td></tr><tr><td><code>=i&#123;</code></td><td>缩进光标所在代码块，不缩进”{“</td></tr><tr><td><code>&lt;&lt;</code></td><td>减少缩进</td></tr><tr><td><code>&gt;&gt;</code></td><td>增加缩进</td></tr><tr><td><code>==</code></td><td>自动缩进</td></tr><tr><td><code>CTRL-A</code></td><td>增加数字</td></tr><tr><td><code>CTRL-X</code></td><td>减少数字</td></tr><tr><td><code>p</code></td><td>粘贴到光标后</td></tr><tr><td><code>P</code></td><td>粘贴到光标前</td></tr><tr><td><code>v</code></td><td>开始标记</td></tr><tr><td><code>y</code></td><td>复制标记内容</td></tr><tr><td><code>V</code></td><td>开始按行标记</td></tr><tr><td><code>CTRL-V</code></td><td>开始列标记</td></tr><tr><td><code>y$</code></td><td>复制当前位置到本行结束的内容</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>Y</code></td><td>复制当前行，同 yy</td></tr><tr><td><code>yt,</code></td><td>复制到逗号</td></tr><tr><td><code>yiw</code></td><td>复制当前单词</td></tr><tr><td><code>&quot;+y</code></td><td>复制当前选中到系统剪切板</td></tr><tr><td><code>3yy</code></td><td>复制光标下三行内容</td></tr><tr><td><code>v0</code></td><td>选中当前位置到行首</td></tr><tr><td><code>v$</code></td><td>选中当前位置到行末</td></tr><tr><td><code>vt,</code></td><td>选中到逗号</td></tr><tr><td><code>viw</code></td><td>选中当前单词</td></tr><tr><td><code>vi)</code></td><td>选中小括号内的东西</td></tr><tr><td><code>vi]</code></td><td>选中中括号内的东西</td></tr><tr><td><code>viB</code></td><td>选中’{}’中的内容</td></tr><tr><td><code>vis</code></td><td>选中句子中的东西</td></tr><tr><td><code>gv</code></td><td>重新选择上一次选中的文字</td></tr><tr><td><code>:set paste</code></td><td>允许粘贴模式（避免粘贴时自动缩进影响格式）</td></tr><tr><td><code>:set nopaste</code></td><td>禁止粘贴模式</td></tr><tr><td><code>&quot;?yy</code></td><td>复制当前行到寄存器 ? ，问号代表 0-9 的寄存器名称</td></tr><tr><td><code>&quot;?p</code></td><td>将寄存器 ? 的内容粘贴到光标后</td></tr><tr><td><code>&quot;?P</code></td><td>将寄存器 ? 的内容粘贴到光标前</td></tr><tr><td><code>:registers</code></td><td>显示所有寄存器内容</td></tr><tr><td><code>:[range]y</code></td><td>复制范围，比如 :20,30y 是复制20到30行，:10y 是复制第十行</td></tr><tr><td><code>:[range]d</code></td><td>删除范围，比如 :20,30d 是删除20到30行，:10d 是删除第十行</td></tr><tr><td><code>ddp</code></td><td>交换两行内容：先删除当前行复制到寄存器，并粘贴</td></tr></tbody></table></div><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存文件</td></tr><tr><td><code>:w &lt;filename&gt;</code></td><td>按名称保存文件</td></tr><tr><td><code>ZZ</code></td><td>保存文件（如果有改动的话），并关闭窗口</td></tr><tr><td><code>:e &lt;filename&gt;</code></td><td>打开文件并编辑</td></tr><tr><td><code>:saveas &lt;filename&gt;</code></td><td>另存为文件</td></tr><tr><td><code>:r &lt;filename&gt;</code></td><td>读取文件并将内容插入到光标后</td></tr><tr><td><code>:r !dir</code></td><td>将dir命令的输出捕获并插入到光标后</td></tr><tr><td><code>:close</code></td><td>关闭文件</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出</td></tr><tr><td><code>:wa</code></td><td>保存所有文件</td></tr><tr><td><code>:cd &lt;path&gt;</code></td><td>切换Vim当前路径</td></tr><tr><td><code>:new</code></td><td>打开一个新的窗口编辑新文件</td></tr><tr><td><code>:enew</code></td><td>在当前窗口创建新文件</td></tr><tr><td><code>:vnew</code></td><td>在左右切分的新窗口中编辑新文件</td></tr><tr><td><code>:tabnew</code></td><td>在新的标签页中编辑新文件</td></tr></tbody></table></div><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>/pattern</code></td><td>从光标处向文件尾搜索 pattern</td></tr><tr><td><code>?pattern</code></td><td>从光标处向文件头搜索 pattern</td></tr><tr><td><code>n</code></td><td>向同一方向执行上一次搜索</td></tr><tr><td><code>N</code></td><td>向相反方向执行上一次搜索</td></tr><tr><td><code>*</code></td><td>向前搜索光标下的单词</td></tr><tr><td><code>#</code></td><td>向后搜索光标下的单词</td></tr><tr><td><code>:s/p1/p2/g</code></td><td>替换当前行的p1为p2</td></tr><tr><td><code>:%s/p1/p2/g</code></td><td>替换当前文件中的p1为p2</td></tr><tr><td><code>:%s/&lt;p1&gt;/p2/g</code></td><td>替换当前文件中的p1单词为p2</td></tr><tr><td><code>:%s/p1/p2/gc</code></td><td>替换当前文件中的p1为p2，并且每处询问你是否替换</td></tr><tr><td><code>:10,20s/p1/p2/g</code></td><td>将第10到20行中所有p1替换为p2</td></tr><tr><td><code>:%s/1\\2\/3/123/g</code></td><td>将“1\2/3” 替换为 “123”（特殊字符使用反斜杠标注）</td></tr><tr><td><code>:%s/\r//g</code></td><td>删除 DOS 换行符 ^M</td></tr><tr><td><code>:g/^\s*$/d</code></td><td>删除空行</td></tr><tr><td><code>:g/test/d</code></td><td>删除所有包含 test 的行</td></tr><tr><td><code>:v/test/d</code></td><td>删除所有不包含 test 的行</td></tr><tr><td><code>:%s/^/test/</code></td><td>在行首加入特定字符(也可以用宏录制来添加)</td></tr><tr><td><code>:%s/$/test/</code></td><td>在行尾加入特定字符(也可以用宏录制来添加)</td></tr><tr><td><code>:sort</code></td><td>排序</td></tr><tr><td><code>:g/^\(.\+\)$\n\1/d</code></td><td>去除重复行(先排序)</td></tr><tr><td><code>:%s/^.\&#123;10\&#125;//</code></td><td>删除每行前10个字符</td></tr><tr><td><code>:%s/.\&#123;10\&#125;$//</code></td><td>删除每行尾10个字符</td></tr></tbody></table></div><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>h tutor</code></td><td>入门文档</td></tr><tr><td><code>h quickref</code></td><td>快速帮助</td></tr><tr><td><code>h index</code></td><td>查询Vim所有键盘命令定义</td></tr><tr><td><code>h description</code></td><td>帮助你更好的使用内置帮助系统</td></tr><tr><td><code>h pattern.txt</code></td><td>正则表达式帮助</td></tr><tr><td><code>h eval</code></td><td>脚本编写帮助</td></tr><tr><td><code>h function-list</code></td><td>查看VimScript的函数列表</td></tr><tr><td><code>h windows.txt</code></td><td>窗口使用帮助</td></tr><tr><td><code>h tabpage.txt</code></td><td>标签页使用帮助</td></tr><tr><td><code>h tips</code></td><td>查看Vim内置的常用技巧文档</td></tr><tr><td><code>h quote</code></td><td>寄存器</td></tr><tr><td><code>h autocommand-events</code></td><td>所有可能事件</td></tr><tr><td><code>h write-plugin</code></td><td>编写插件</td></tr></tbody></table></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>vim -u NONE -N</code></td><td>开启vim时不加载vimrc文件</td></tr><tr><td><code>vimdiff file1 file2</code></td><td>显示文件差异</td></tr><tr><td><code>vim -R filename</code></td><td>以只读方式打开（阅读模式）</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
